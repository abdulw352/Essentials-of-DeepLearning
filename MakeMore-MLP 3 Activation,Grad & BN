{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import torch\nimport torch.nn.functional as F\nimport matplotlib.pyplot as plt\n\n%matplotlib inline","metadata":{"execution":{"iopub.status.busy":"2024-07-16T21:31:24.073723Z","iopub.execute_input":"2024-07-16T21:31:24.074520Z","iopub.status.idle":"2024-07-16T21:31:27.719913Z","shell.execute_reply.started":"2024-07-16T21:31:24.074478Z","shell.execute_reply":"2024-07-16T21:31:27.718586Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"import tqdm","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import random \nrandom.seed(42)","metadata":{"execution":{"iopub.status.busy":"2024-07-16T21:31:27.722251Z","iopub.execute_input":"2024-07-16T21:31:27.722828Z","iopub.status.idle":"2024-07-16T21:31:27.728303Z","shell.execute_reply.started":"2024-07-16T21:31:27.722785Z","shell.execute_reply":"2024-07-16T21:31:27.727098Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\n\ndf = pd.read_csv('/kaggle/input/us-baby-names-by-year-of-birth/babyNamesUSYOB-mostpopular.csv')\nnames = df.Name.values","metadata":{"execution":{"iopub.status.busy":"2024-07-16T21:31:27.729753Z","iopub.execute_input":"2024-07-16T21:31:27.730124Z","iopub.status.idle":"2024-07-16T21:31:29.159322Z","shell.execute_reply.started":"2024-07-16T21:31:27.730095Z","shell.execute_reply":"2024-07-16T21:31:29.158285Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"names[:10]","metadata":{"execution":{"iopub.status.busy":"2024-07-16T21:31:29.161600Z","iopub.execute_input":"2024-07-16T21:31:29.161995Z","iopub.status.idle":"2024-07-16T21:31:29.170226Z","shell.execute_reply.started":"2024-07-16T21:31:29.161963Z","shell.execute_reply":"2024-07-16T21:31:29.169132Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"array(['Mary', 'Anna', 'Emma', 'Elizabeth', 'Minnie', 'Margaret', 'Ida',\n       'Alice', 'Bertha', 'Sarah'], dtype=object)"},"metadata":{}}]},{"cell_type":"markdown","source":"**Building a vocabulary of the characters and mapping for to/from ints**","metadata":{}},{"cell_type":"code","source":"chars = sorted(list(set(''.join(names))))\nstoi = {s:i+1 for i,s in enumerate(chars)}\nstoi['.'] = 0\nitos = {i:s for s,i in stoi.items()}\nvocab_size = len(itos)\nitos","metadata":{"execution":{"iopub.status.busy":"2024-07-16T21:31:29.171386Z","iopub.execute_input":"2024-07-16T21:31:29.171741Z","iopub.status.idle":"2024-07-16T21:31:29.224460Z","shell.execute_reply.started":"2024-07-16T21:31:29.171712Z","shell.execute_reply":"2024-07-16T21:31:29.222909Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"{1: 'A',\n 2: 'B',\n 3: 'C',\n 4: 'D',\n 5: 'E',\n 6: 'F',\n 7: 'G',\n 8: 'H',\n 9: 'I',\n 10: 'J',\n 11: 'K',\n 12: 'L',\n 13: 'M',\n 14: 'N',\n 15: 'O',\n 16: 'P',\n 17: 'Q',\n 18: 'R',\n 19: 'S',\n 20: 'T',\n 21: 'U',\n 22: 'V',\n 23: 'W',\n 24: 'X',\n 25: 'Y',\n 26: 'Z',\n 27: 'a',\n 28: 'b',\n 29: 'c',\n 30: 'd',\n 31: 'e',\n 32: 'f',\n 33: 'g',\n 34: 'h',\n 35: 'i',\n 36: 'j',\n 37: 'k',\n 38: 'l',\n 39: 'm',\n 40: 'n',\n 41: 'o',\n 42: 'p',\n 43: 'q',\n 44: 'r',\n 45: 's',\n 46: 't',\n 47: 'u',\n 48: 'v',\n 49: 'w',\n 50: 'x',\n 51: 'y',\n 52: 'z',\n 0: '.'}"},"metadata":{}}]},{"cell_type":"code","source":"block_size = 3 # context length: how many characters taken to predict the next character","metadata":{"execution":{"iopub.status.busy":"2024-07-16T21:31:29.225886Z","iopub.execute_input":"2024-07-16T21:31:29.226236Z","iopub.status.idle":"2024-07-16T21:31:29.237792Z","shell.execute_reply.started":"2024-07-16T21:31:29.226207Z","shell.execute_reply":"2024-07-16T21:31:29.236279Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"def build_dataset(words):\n    X, Y = [], []\n    for n in words:\n    \n        context = [0] * block_size\n        for ch in n + '.':\n            ix = stoi[ch]\n            X.append(context)\n            Y.append(ix)\n        \n            context = context[1:] + [ix] # crop and append\n        \n    X = torch.tensor(X)\n    Y = torch.tensor(Y)\n    print(X.shape, Y.shape)\n    return X,Y","metadata":{"execution":{"iopub.status.busy":"2024-07-16T21:31:29.239397Z","iopub.execute_input":"2024-07-16T21:31:29.239901Z","iopub.status.idle":"2024-07-16T21:31:29.253732Z","shell.execute_reply.started":"2024-07-16T21:31:29.239839Z","shell.execute_reply":"2024-07-16T21:31:29.252500Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"random.shuffle(names)\nn1 = int(0.8*len(names))\nn2 = int(0.9*len(names))\n\n# Train, Dev, and Test split \n\nXtr, Ytr = build_dataset(names[:n1])          # 80%\nXdev, Ydev = build_dataset(names[n1:n2])      # 10%\nXte, Yte = build_dataset(names[n2:])          # 10%","metadata":{"execution":{"iopub.status.busy":"2024-07-16T21:31:29.255572Z","iopub.execute_input":"2024-07-16T21:31:29.255972Z","iopub.status.idle":"2024-07-16T21:31:33.615494Z","shell.execute_reply.started":"2024-07-16T21:31:29.255938Z","shell.execute_reply":"2024-07-16T21:31:33.614398Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"torch.Size([1233618, 3]) torch.Size([1233618])\ntorch.Size([154343, 3]) torch.Size([154343])\ntorch.Size([154741, 3]) torch.Size([154741])\n","output_type":"stream"}]},{"cell_type":"code","source":"n_emb = 10 # the dimensionality of the character embedding vectors \nn_hidden = 300 # the number of neurons in the hidden layer of the MLP\n\ng = torch.Generator().manual_seed(42) # For reproducibility \nC = torch.randn((vocab_size, n_emb), generator=g)\nW1 = torch.randn((n_emb * block_size, n_hidden),   generator=g)\nb1 = torch.randn(n_hidden,                         generator=g) * 0.01\nW2 = torch.randn((n_hidden, vocab_size),           generator=g) * 0.01\nb2 = torch.randn(vocab_size,                       generator=g) * 0\nparameters = [C, W1, b1, W2, b2]","metadata":{"execution":{"iopub.status.busy":"2024-07-16T21:31:33.616922Z","iopub.execute_input":"2024-07-16T21:31:33.617252Z","iopub.status.idle":"2024-07-16T21:31:33.659212Z","shell.execute_reply.started":"2024-07-16T21:31:33.617224Z","shell.execute_reply":"2024-07-16T21:31:33.658045Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"print(sum(p.nelement() for p in parameters )) # total number of parameters in the network\n\nfor p in parameters:\n    p.requires_grad = True","metadata":{"execution":{"iopub.status.busy":"2024-07-16T21:31:33.662435Z","iopub.execute_input":"2024-07-16T21:31:33.662813Z","iopub.status.idle":"2024-07-16T21:31:33.669618Z","shell.execute_reply.started":"2024-07-16T21:31:33.662779Z","shell.execute_reply":"2024-07-16T21:31:33.668223Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"25783\n","output_type":"stream"}]},{"cell_type":"code","source":"max_steps = 100_000\nbatch_size = 32\nstepi = []\nlossi = []\n\nfor i in range(max_steps):\n    \n    # minibatch construct\n    ix = torch.randint(0, Xtr.shape[0], (batch_size,))\n    Xb, Yb = Xtr[ix], Ytr[ix] # batch X, Y\n    \n    # Forward Pass\n    emb = C[Xb] # (32, 3, 10)\n    embcat = emb.view(emb.shape[0], -1) # concatenate the vectors\n    # Linear Layer\n    hpreact = embcat @ W1 + b1  # hidden layer pre-activation\n    #--------------------------------------------------------\n    h = torch.tanh(hpreact) # hidden layer\n    logits = h @ W2 + b2 # (32, 53)\n    loss = F.cross_entropy(logits, Yb)\n    # print(loss.item())\n    \n    # Backward pass\n    for p in parameters:\n        p.grad = None\n    loss.backward()\n    \n    # update\n    lr = 0.1 if i < max_steps/2 else 0.01 # set to 0.1 after looking for the optimal learning rate then decreased to 0.05 and eventually to 0.01\n    \n    for p in parameters:\n        p.data += -lr * p.grad\n    \n    # track stats \n    # lri.append(lre[i])     no longer need to track the learning rate\n    if i % 10_000 == 0:\n        print(f\"{i:7d}/{max_steps:7d}: {loss.item():.4f}\")\n    stepi.append(i)\n    lossi.append(loss.log10().item())","metadata":{"execution":{"iopub.status.busy":"2024-07-16T21:31:33.670894Z","iopub.execute_input":"2024-07-16T21:31:33.671277Z","iopub.status.idle":"2024-07-16T21:32:03.453399Z","shell.execute_reply.started":"2024-07-16T21:31:33.671246Z","shell.execute_reply":"2024-07-16T21:32:03.451964Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"markdown","source":"#### Calibrate Batch Norm after training\n\n```python \n# To disable gradient tracking\nwith torch.no_grad():         \n```","metadata":{}},{"cell_type":"code","source":"with torch.no_grad():\n    # pass the training set\n    emb = C[Xtr]\n    embcat = emb.view(emb.shape[0], -1)\n    hpreact = embcat @ W1 + b1\n    # measure the mean and std over training set \n    bnmean = hpreact.mean(0, keepdim = True)\n    bnstd = hpreact.std(0, keepdim = True)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def split_loss(split):\n    x,y = {\n        \"train\" : (Xtr, Ytr),\n        \"val\" : (Xdev, Ydev),\n        \"test\" : (Xte, Yte)\n    }[split]\n    emb = C[x] # (N, block_size, n_embd) \n    embcat = emb.view(emb.shape[0], -1)   # concat into (N, block_size * n_embd)\n    hpreact = embcat @ W1 + b1\n    hpreact = bngain * (hpreact - bmean_running) / bnstd_running + bnbias\n    h = torch.tanh(hpreact) # (N, n_hidden)\n    logits = h @ W2 + b2    # (N, vocab_size)\n    loss = F.cross_entropy(logits, Y)\n    print(split, loss.item())\n    \nsplit_loss('train')\nsplit_loss('val')","metadata":{"execution":{"iopub.status.busy":"2024-07-16T21:32:03.455010Z","iopub.execute_input":"2024-07-16T21:32:03.455464Z","iopub.status.idle":"2024-07-16T21:32:07.326819Z","shell.execute_reply.started":"2024-07-16T21:32:03.455425Z","shell.execute_reply":"2024-07-16T21:32:07.325836Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"tensor(1.8264, grad_fn=<NllLossBackward0>)"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Loss Record\n\n#### Training Loss\ninitial (100,000 steps) : 1.8803","metadata":{}},{"cell_type":"markdown","source":"### Optimizing intialization of the Network","metadata":{}},{"cell_type":"markdown","source":"Calculating expected loss at initialization\nfor this example its:\n```python\ninit_loss = -torch.tensor(1/vocab_size).log()\n```\nCan mimize initial loss by starting with a low value for wegihts and biases that is nearly uniform. \n\n- Weights should not be set to `0` at initialization. ","metadata":{}},{"cell_type":"code","source":"-torch.tensor(1/vocab_size).log()","metadata":{"execution":{"iopub.status.busy":"2024-07-16T21:32:07.327978Z","iopub.execute_input":"2024-07-16T21:32:07.328366Z","iopub.status.idle":"2024-07-16T21:32:07.336229Z","shell.execute_reply.started":"2024-07-16T21:32:07.328331Z","shell.execute_reply":"2024-07-16T21:32:07.335056Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"tensor(3.9703)"},"metadata":{}}]},{"cell_type":"code","source":"h.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-16T21:32:07.337534Z","iopub.execute_input":"2024-07-16T21:32:07.337906Z","iopub.status.idle":"2024-07-16T21:32:07.347627Z","shell.execute_reply.started":"2024-07-16T21:32:07.337857Z","shell.execute_reply":"2024-07-16T21:32:07.346485Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"torch.Size([1233618, 300])"},"metadata":{}}]},{"cell_type":"code","source":"plt.hist(h[:1000].view(-1).tolist(), 25)","metadata":{"execution":{"iopub.status.busy":"2024-07-16T21:32:07.348905Z","iopub.execute_input":"2024-07-16T21:32:07.349272Z","iopub.status.idle":"2024-07-16T21:32:08.512745Z","shell.execute_reply.started":"2024-07-16T21:32:07.349235Z","shell.execute_reply":"2024-07-16T21:32:08.511485Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"(array([119718.,   5348.,   3047.,   2291.,   1694.,   1507.,   1506.,\n          1295.,   1691.,   2482.,   1995.,   2418.,   2866.,   2407.,\n          1756.,   2106.,   1894.,   1641.,   1511.,   1533.,   1756.,\n          2239.,   2867.,   5428., 127004.]),\n array([-1.  , -0.92, -0.84, -0.76, -0.68, -0.6 , -0.52, -0.44, -0.36,\n        -0.28, -0.2 , -0.12, -0.04,  0.04,  0.12,  0.2 ,  0.28,  0.36,\n         0.44,  0.52,  0.6 ,  0.68,  0.76,  0.84,  0.92,  1.  ]),\n <BarContainer object of 25 artists>)"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"When propogating through tanh for back propogation the neurons on the extreme ends are back propogated since they are in the flat region of tanh so the gradient will go to zero. \n- at 1 or -1 ","metadata":{}},{"cell_type":"code","source":"plt.hist(hpreact[:1000].view(-1).tolist(), 25)","metadata":{"execution":{"iopub.status.busy":"2024-07-16T21:32:08.514344Z","iopub.execute_input":"2024-07-16T21:32:08.514775Z","iopub.status.idle":"2024-07-16T21:32:08.836457Z","shell.execute_reply.started":"2024-07-16T21:32:08.514736Z","shell.execute_reply":"2024-07-16T21:32:08.835335Z"},"trusted":true},"execution_count":16,"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"(array([6.000e+00, 1.000e+01, 8.000e+00, 3.800e+01, 8.900e+01, 1.300e+02,\n        2.820e+02, 4.550e+02, 5.580e+02, 9.630e+02, 1.102e+03, 1.602e+03,\n        1.098e+03, 1.043e+03, 7.840e+02, 5.480e+02, 3.530e+02, 2.790e+02,\n        1.200e+02, 6.800e+01, 3.500e+01, 2.600e+01, 2.000e+00, 0.000e+00,\n        1.000e+00]),\n array([-31.70847321, -29.01436111, -26.32024902, -23.62613693,\n        -20.93202484, -18.23791275, -15.54380066, -12.84968857,\n        -10.15557648,  -7.46146439,  -4.76735229,  -2.0732402 ,\n          0.62087189,   3.31498398,   6.00909607,   8.70320816,\n         11.39732025,  14.09143234,  16.78554443,  19.47965652,\n         22.17376862,  24.86788071,  27.5619928 ,  30.25610489,\n         32.95021698,  35.64432907]),\n <BarContainer object of 25 artists>)"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Pytorchified \n","metadata":{}},{"cell_type":"code","source":"class Linear:\n    \n    def __init__(self, fan_in, fan_out, bias = True):\n        self.weight = torch.randn((fan_in, fan_out), generator = g) / fan_in**0.5\n        self.bias = torch.zeros(fan_out) if bias else None\n        \n    def __call__(self, x):\n        self.out = x @ self.weight\n        if self.bias is not None:\n            self.out += self.bias\n        return self.out\n    \n    def parameters(self):\n        return [self.weight] + ([] if self.bias is None else [self.bias])\n    \nclass BatchNorm1d:\n    \n    def __init__(self, dim, eps=1e-5, momentum=0.1):\n        self.eps = eps\n        self.momentum = momentum\n        self.training = = True\n        # parameters (trained with backprop)\n        self.gamma = torch.ones(dim)\n        self.beta = torch.zeros(dim)\n        # buffers (trained with a running 'momentum update')\n        self.running_mean = torch.zeros(dim)\n        self.running_var = torch.ones(dim)\n        \n    def __call__(self, x):\n        # calculate the forward pass\n        if self.training:\n            xmean = x.mean(0, keepdim=True) # batch mean\n            xvar = x.var(0, keepdim = True) # batch variance \n        else:\n            xmean = self.running_mean\n            xvar = self.running_var\n        xhat = (x - xmean) / torch.sqrt(xvar + self.eps) # normalize to unit variance\n        self.out = self.gamma * xhat + self.beta\n        # update the buffers \n        if self.training:\n            with torch.no_grad():\n                self.running_mean = (1 - self.momentum) * self.running_mean + self.momentum * xmean\n                self.running_var = (1 - self.momentum) * self.running_var + self.momentum * xvar\n        return self.out\n    \n    def parameters(self):\n        return [self.gamma, self.beta]\n    \nclass Tanh:\n    \n    def __call__(self, x):\n        self.out = torch.tanh(x)\n        return self.out\n    def parameters(self):\n        return []\n    \nn_embd = 10      # the dimensionality of the character embedding vectors\nn_hidden = 100   # the number of neurons in the hidden layer of the MLP\ng = torch.Generator.manual_seed(42) # for reproducibility","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"C = torch.randn((vocab_size, n_embd),  generator = g)\nlayers = [\n    Linear(n_embd * black_size, n_hidden, bias = False), BatchNorm1d(n_hidden), Tanh()\n    Linear(           n_hidden, n_hidden, bias = False), BatchNorm1d(n_hidden), Tanh(),\n    Linear(           n_hidden, n_hidden, bias = False), BatchNorm1d(n_hidden), Tanh(),\n    Linear(           n_hidden, n_hidden, bias = False), BatchNorm1d(n_hidden), Tanh(),\n    Linear(           n_hidden, n_hidden, bias = False), BatchNorm1d(n_hidden), Tanh(),\n    Linear(           n_hidden, vocab_size, bias = False), BatchNorm1d(vocab_size),\n]\n\nwith torch.no_grad():\n    # last layer: make less confident\n    layers[-1].gammma *= 0.1\n    # all other layers: apply gain\n    for layer in layers[:-1]:\n        if isinstance(layer, Linear):\n            layer.weight *= 1.0 # 5/3\n            \nparameters = [C] + [p for layer in layers for p in layer.parameters()]\nprint(sum(p.nelement() for p in parameters))   # number of the parameters in total\nfor p in parameters:\n    p.requires_grad = True","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Optimization","metadata":{}},{"cell_type":"code","source":"max_steps = 100_000\nbatch_size = 32\nstepi = []\n# lossi = []\nud = []\n\nfor i in range(max_steps):\n    \n    # minibatch construct\n    ix = torch.randint(0, Xtr.shape[0], (batch_size,), generator = g)\n    Xb, Yb = Xtr[ix], Ytr[ix] # batch X, Y\n    \n    # Forward Pass\n    emb = C[Xb] # (32, 3, 10)\n    embcat = emb.view(emb.shape[0], -1) # concatenate the vectors\n    # Linear Layer\n    hpreact = embcat @ W1 + b1  # hidden layer pre-activation\n    #--------------------------------------------------------\n    h = torch.tanh(hpreact) # hidden layer\n    logits = h @ W2 + b2 # (32, 53)\n    loss = F.cross_entropy(logits, Yb)\n    # print(loss.item())\n    \n    # Backward pass\n    for p in parameters:\n        p.grad = None\n    loss.backward()\n    \n    # update\n    lr = 0.1 if i < max_steps/2 else 0.01 # set to 0.1 after looking for the optimal learning rate then decreased to 0.05 and eventually to 0.01\n    \n    for p in parameters:\n        p.data += -lr * p.grad\n    \n    # track stats \n    # lri.append(lre[i])     no longer need to track the learning rate\n    if i % 10_000 == 0:\n        print(f\"{i:7d}/{max_steps:7d}: {loss.item():.4f}\")\n    stepi.append(i)\n    lossi.append(loss.log10().item())","metadata":{"execution":{"iopub.status.busy":"2024-07-16T21:31:33.670894Z","iopub.execute_input":"2024-07-16T21:31:33.671277Z","iopub.status.idle":"2024-07-16T21:32:03.453399Z","shell.execute_reply.started":"2024-07-16T21:31:33.671246Z","shell.execute_reply":"2024-07-16T21:32:03.451964Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"# visualize histograms\nplt.figure(figsize=(20, 4)) # width and height of the plot\nlegends = []\nfor i, layer in enumerate(layers[:-1]): # note: exclude the output layer\n  if isinstance(layer, Tanh):\n    t = layer.out\n    print('layer %d (%10s): mean %+.2f, std %.2f, saturated: %.2f%%' % (i, layer.__class__.__name__, t.mean(), t.std(), (t.abs() > 0.97).float().mean()*100))\n    hy, hx = torch.histogram(t, density=True)\n    plt.plot(hx[:-1].detach(), hy.detach())\n    legends.append(f'layer {i} ({layer.__class__.__name__}')\nplt.legend(legends);\nplt.title('activation distribution')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# visualize histograms\nplt.figure(figsize=(20, 4)) # width and height of the plot\nlegends = []\nfor i, layer in enumerate(layers[:-1]): # note: exclude the output layer\n  if isinstance(layer, Tanh):\n    t = layer.out.grad\n    print('layer %d (%10s): mean %+f, std %e' % (i, layer.__class__.__name__, t.mean(), t.std()))\n    hy, hx = torch.histogram(t, density=True)\n    plt.plot(hx[:-1].detach(), hy.detach())\n    legends.append(f'layer {i} ({layer.__class__.__name__}')\nplt.legend(legends);\nplt.title('gradient distribution')","metadata":{"execution":{"iopub.status.busy":"2024-07-16T21:32:09.212168Z","iopub.status.idle":"2024-07-16T21:32:09.212562Z","shell.execute_reply.started":"2024-07-16T21:32:09.212384Z","shell.execute_reply":"2024-07-16T21:32:09.212401Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# visualize histograms\nplt.figure(figsize=(20, 4)) # width and height of the plot\nlegends = []\nfor i,p in enumerate(parameters):\n  t = p.grad\n  if p.ndim == 2:\n    print('weight %10s | mean %+f | std %e | grad:data ratio %e' % (tuple(p.shape), t.mean(), t.std(), t.std() / p.std()))\n    hy, hx = torch.histogram(t, density=True)\n    plt.plot(hx[:-1].detach(), hy.detach())\n    legends.append(f'{i} {tuple(p.shape)}')\nplt.legend(legends)\nplt.title('weights gradient distribution');","metadata":{"execution":{"iopub.status.busy":"2024-07-16T21:32:09.214410Z","iopub.status.idle":"2024-07-16T21:32:09.214785Z","shell.execute_reply.started":"2024-07-16T21:32:09.214612Z","shell.execute_reply":"2024-07-16T21:32:09.214628Z"},"trusted":true},"execution_count":null,"outputs":[]}]}