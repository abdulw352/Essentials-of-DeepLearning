{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import torch\nimport torch.nn.functional as F\nimport matplotlib.pyplot as plt\n\n%matplotlib inline","metadata":{"execution":{"iopub.status.busy":"2024-07-12T21:15:50.338342Z","iopub.execute_input":"2024-07-12T21:15:50.340105Z","iopub.status.idle":"2024-07-12T21:15:54.138601Z","shell.execute_reply.started":"2024-07-12T21:15:50.339921Z","shell.execute_reply":"2024-07-12T21:15:54.137184Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"import random \nrandom.seed(42)","metadata":{"execution":{"iopub.status.busy":"2024-07-12T21:15:54.141387Z","iopub.execute_input":"2024-07-12T21:15:54.142357Z","iopub.status.idle":"2024-07-12T21:15:54.148741Z","shell.execute_reply.started":"2024-07-12T21:15:54.142286Z","shell.execute_reply":"2024-07-12T21:15:54.147136Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\n\ndf = pd.read_csv('/kaggle/input/us-baby-names-by-year-of-birth/babyNamesUSYOB-mostpopular.csv')\nnames = df.Name.values","metadata":{"execution":{"iopub.status.busy":"2024-07-12T21:15:54.150193Z","iopub.execute_input":"2024-07-12T21:15:54.150582Z","iopub.status.idle":"2024-07-12T21:15:55.726316Z","shell.execute_reply.started":"2024-07-12T21:15:54.150543Z","shell.execute_reply":"2024-07-12T21:15:55.725107Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"names[:10]","metadata":{"execution":{"iopub.status.busy":"2024-07-12T21:15:55.728971Z","iopub.execute_input":"2024-07-12T21:15:55.729377Z","iopub.status.idle":"2024-07-12T21:15:55.739978Z","shell.execute_reply.started":"2024-07-12T21:15:55.729344Z","shell.execute_reply":"2024-07-12T21:15:55.738603Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"array(['Mary', 'Anna', 'Emma', 'Elizabeth', 'Minnie', 'Margaret', 'Ida',\n       'Alice', 'Bertha', 'Sarah'], dtype=object)"},"metadata":{}}]},{"cell_type":"markdown","source":"**Building a vocabulary of the characters and mapping for to/from ints**","metadata":{}},{"cell_type":"code","source":"chars = sorted(list(set(''.join(names))))\nstoi = {s:i+1 for i,s in enumerate(chars)}\nstoi['.'] = 0\nitos = {i:s for s,i in stoi.items()}\nvocab_size = len(itos)\nitos","metadata":{"execution":{"iopub.status.busy":"2024-07-12T21:15:55.741796Z","iopub.execute_input":"2024-07-12T21:15:55.742301Z","iopub.status.idle":"2024-07-12T21:15:55.789290Z","shell.execute_reply.started":"2024-07-12T21:15:55.742257Z","shell.execute_reply":"2024-07-12T21:15:55.787887Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"{1: 'A',\n 2: 'B',\n 3: 'C',\n 4: 'D',\n 5: 'E',\n 6: 'F',\n 7: 'G',\n 8: 'H',\n 9: 'I',\n 10: 'J',\n 11: 'K',\n 12: 'L',\n 13: 'M',\n 14: 'N',\n 15: 'O',\n 16: 'P',\n 17: 'Q',\n 18: 'R',\n 19: 'S',\n 20: 'T',\n 21: 'U',\n 22: 'V',\n 23: 'W',\n 24: 'X',\n 25: 'Y',\n 26: 'Z',\n 27: 'a',\n 28: 'b',\n 29: 'c',\n 30: 'd',\n 31: 'e',\n 32: 'f',\n 33: 'g',\n 34: 'h',\n 35: 'i',\n 36: 'j',\n 37: 'k',\n 38: 'l',\n 39: 'm',\n 40: 'n',\n 41: 'o',\n 42: 'p',\n 43: 'q',\n 44: 'r',\n 45: 's',\n 46: 't',\n 47: 'u',\n 48: 'v',\n 49: 'w',\n 50: 'x',\n 51: 'y',\n 52: 'z',\n 0: '.'}"},"metadata":{}}]},{"cell_type":"code","source":"block_size = 3 # context length: how many characters taken to predict the next character","metadata":{"execution":{"iopub.status.busy":"2024-07-12T21:15:55.790882Z","iopub.execute_input":"2024-07-12T21:15:55.791326Z","iopub.status.idle":"2024-07-12T21:15:55.799998Z","shell.execute_reply.started":"2024-07-12T21:15:55.791292Z","shell.execute_reply":"2024-07-12T21:15:55.798600Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"def build_dataset(words):\n    X, Y = [], []\n    for n in words:\n    \n        context = [0] * block_size\n        for ch in n + '.':\n            ix = stoi[ch]\n            X.append(context)\n            Y.append(ix)\n        \n            context = context[1:] + [ix] # crop and append\n        \n    X = torch.tensor(X)\n    Y = torch.tensor(Y)\n    print(X.shape, Y.shape)\n    return X,Y","metadata":{"execution":{"iopub.status.busy":"2024-07-12T21:15:55.801717Z","iopub.execute_input":"2024-07-12T21:15:55.802677Z","iopub.status.idle":"2024-07-12T21:15:55.812723Z","shell.execute_reply.started":"2024-07-12T21:15:55.802632Z","shell.execute_reply":"2024-07-12T21:15:55.811526Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"random.shuffle(names)\nn1 = int(0.8*len(names))\nn2 = int(0.9*len(names))\n\n# Train, Dev, and Test split \n\nXtr, Ytr = build_dataset(names[:n1])          # 80%\nXdev, Ydev = build_dataset(names[n1:n2])      # 10%\nXte, Yte = build_dataset(names[n2:])          # 10%","metadata":{"execution":{"iopub.status.busy":"2024-07-12T21:16:10.821734Z","iopub.execute_input":"2024-07-12T21:16:10.822177Z","iopub.status.idle":"2024-07-12T21:16:15.473803Z","shell.execute_reply.started":"2024-07-12T21:16:10.822144Z","shell.execute_reply":"2024-07-12T21:16:15.471758Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"torch.Size([1234235, 3]) torch.Size([1234235])\ntorch.Size([154146, 3]) torch.Size([154146])\ntorch.Size([154321, 3]) torch.Size([154321])\n","output_type":"stream"}]},{"cell_type":"code","source":"n_emb = 10 # the dimensionality of the character embedding vectors \nn_hidden = 300 # the number of neurons in the hidden layer of the MLP\n\ng = torch.Generator().manual_seed(42) # For reproducibility \nC = torch.randn((vocab_size, n_emb), generator=g)\nW1 = torch.randn((n_emb * block_size, n_hidden),   generator=g)\nb1 = torch.randn(n_hidden,                         generator=g) * 0.01\nW2 = torch.randn((n_hidden, vocab_size),           generator=g) * 0.01\nb2 = torch.randn(vocab_size,                       generator=g) * 0\nparameters = [C, W1, b1, W2, b2]","metadata":{"execution":{"iopub.status.busy":"2024-07-12T21:16:17.794318Z","iopub.execute_input":"2024-07-12T21:16:17.794772Z","iopub.status.idle":"2024-07-12T21:16:17.840200Z","shell.execute_reply.started":"2024-07-12T21:16:17.794740Z","shell.execute_reply":"2024-07-12T21:16:17.838958Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"print(sum(p.nelement() for p in parameters )) # total number of parameters in the network\n\nfor p in parameters:\n    p.requires_grad = True","metadata":{"execution":{"iopub.status.busy":"2024-07-12T21:16:18.088237Z","iopub.execute_input":"2024-07-12T21:16:18.089219Z","iopub.status.idle":"2024-07-12T21:16:18.095828Z","shell.execute_reply.started":"2024-07-12T21:16:18.089163Z","shell.execute_reply":"2024-07-12T21:16:18.094359Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"25783\n","output_type":"stream"}]},{"cell_type":"code","source":"max_steps = 100_000\nbatch_size = 32\nstepi = []\nlossi = []\n\nfor i in range(50_000):\n    \n    # minibatch construct\n    ix = torch.randint(0, Xtr.shape[0], (32,))\n    Xb, Yb = Xtr[ix], Ytr[ix] # batch X, Y\n    \n    # Forward Pass\n    emb = C[Xb] # (32, 3, 10)\n    embcat = emb.view(emb.shape[0], -1) # concatenate the vectors\n    # Linear Layer\n    hpreact = embcat @ W1 + b1  # hidden layer pre-activation\n    #--------------------------------------------------------\n    h = torch.tanh(hpreact) # hidden layer\n    logits = h @ W2 + b2 # (32, 53)\n    loss = F.cross_entropy(logits, Yb)\n    # print(loss.item())\n    \n    # Backward pass\n    for p in parameters:\n        p.grad = None\n    loss.backward()\n    \n    # update\n    lr = 0.1 if i < 50_000 else 0.01 # set to 0.1 after looking for the optimal learning rate then decreased to 0.05 and eventually to 0.01\n    \n    for p in parameters:\n        p.data += -lr * p.grad\n    \n    # track stats \n    # lri.append(lre[i])     no longer need to track the learning rate\n    stepi.append(i)\n    lossi.append(loss.log10().item())","metadata":{"execution":{"iopub.status.busy":"2024-07-12T21:16:26.411766Z","iopub.execute_input":"2024-07-12T21:16:26.412271Z","iopub.status.idle":"2024-07-12T21:16:59.437125Z","shell.execute_reply.started":"2024-07-12T21:16:26.412229Z","shell.execute_reply":"2024-07-12T21:16:59.435812Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"emb = C[Xtr] # (32, 3, 2)\nh = torch.tanh(emb.view(-1, 30) @ W1 + b1) # (32, 200)\nlogits = h @ W2 + b2\nloss = F.cross_entropy(logits, Ytr)\nloss","metadata":{"execution":{"iopub.status.busy":"2024-07-12T21:16:59.439085Z","iopub.execute_input":"2024-07-12T21:16:59.439499Z","iopub.status.idle":"2024-07-12T21:17:03.566330Z","shell.execute_reply.started":"2024-07-12T21:16:59.439462Z","shell.execute_reply":"2024-07-12T21:17:03.565099Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"tensor(1.8072, grad_fn=<NllLossBackward0>)"},"metadata":{}}]},{"cell_type":"markdown","source":"### Loss Record\n\n#### Training Loss\ninitial (100,000 steps) : 1.8803","metadata":{}},{"cell_type":"markdown","source":"### Optimizing intialization of the Network","metadata":{}},{"cell_type":"markdown","source":"Calculating expected loss at initialization\nfor this example its:\n```python\ninit_loss = -torch.tensor(1/vocab_size).log()\n```\nCan mimize initial loss by starting with a low value for wegihts and biases that is nearly uniform. \n\n- Weights should not be set to `0` at initialization. ","metadata":{}},{"cell_type":"code","source":"-torch.tensor(1/vocab_size).log()","metadata":{"execution":{"iopub.status.busy":"2024-07-12T21:17:19.322603Z","iopub.execute_input":"2024-07-12T21:17:19.323011Z","iopub.status.idle":"2024-07-12T21:17:19.332661Z","shell.execute_reply.started":"2024-07-12T21:17:19.322978Z","shell.execute_reply":"2024-07-12T21:17:19.331343Z"},"trusted":true},"execution_count":16,"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"tensor(3.9703)"},"metadata":{}}]},{"cell_type":"code","source":"h.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-12T21:17:22.305580Z","iopub.execute_input":"2024-07-12T21:17:22.306009Z","iopub.status.idle":"2024-07-12T21:17:22.312730Z","shell.execute_reply.started":"2024-07-12T21:17:22.305977Z","shell.execute_reply":"2024-07-12T21:17:22.311636Z"},"trusted":true},"execution_count":17,"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"torch.Size([1234235, 300])"},"metadata":{}}]},{"cell_type":"code","source":"plt.hist(h[:1000].view(-1).tolist(), 25)","metadata":{"execution":{"iopub.status.busy":"2024-07-12T21:17:42.778848Z","iopub.execute_input":"2024-07-12T21:17:42.779318Z","iopub.status.idle":"2024-07-12T21:17:43.946187Z","shell.execute_reply.started":"2024-07-12T21:17:42.779283Z","shell.execute_reply":"2024-07-12T21:17:43.945081Z"},"trusted":true},"execution_count":18,"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"(array([118899.,   4996.,   3208.,   2141.,   1623.,   1274.,   1659.,\n          1174.,   2070.,   2170.,   2732.,   2154.,   2958.,   3521.,\n          2027.,   2021.,   1781.,   1367.,   1428.,   1259.,   1735.,\n          2129.,   3131.,   5159., 127384.]),\n array([-1.  , -0.92, -0.84, -0.76, -0.68, -0.6 , -0.52, -0.44, -0.36,\n        -0.28, -0.2 , -0.12, -0.04,  0.04,  0.12,  0.2 ,  0.28,  0.36,\n         0.44,  0.52,  0.6 ,  0.68,  0.76,  0.84,  0.92,  1.  ]),\n <BarContainer object of 25 artists>)"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"When propogating through tanh for back propogation the neurons on the extreme ends since the gradient will go to zero. \n- at 1 or -1 ","metadata":{}},{"cell_type":"code","source":"plt.hist(hpreact[:1000].view(-1).tolist(), 25)","metadata":{"execution":{"iopub.status.busy":"2024-07-12T21:18:02.328998Z","iopub.execute_input":"2024-07-12T21:18:02.330721Z","iopub.status.idle":"2024-07-12T21:18:02.690656Z","shell.execute_reply.started":"2024-07-12T21:18:02.330657Z","shell.execute_reply":"2024-07-12T21:18:02.688719Z"},"trusted":true},"execution_count":19,"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"(array([7.000e+00, 8.000e+00, 2.200e+01, 5.600e+01, 7.600e+01, 2.050e+02,\n        3.410e+02, 4.800e+02, 7.880e+02, 9.450e+02, 1.040e+03, 1.553e+03,\n        1.034e+03, 1.024e+03, 7.250e+02, 5.230e+02, 3.200e+02, 2.260e+02,\n        1.220e+02, 7.200e+01, 1.800e+01, 1.100e+01, 2.000e+00, 1.000e+00,\n        1.000e+00]),\n array([-30.10229874, -27.45109039, -24.79988205, -22.14867371,\n        -19.49746536, -16.84625702, -14.19504868, -11.54384033,\n         -8.89263199,  -6.24142365,  -3.5902153 ,  -0.93900696,\n          1.71220139,   4.36340973,   7.01461807,   9.66582642,\n         12.31703476,  14.9682431 ,  17.61945145,  20.27065979,\n         22.92186813,  25.57307648,  28.22428482,  30.87549316,\n         33.52670151,  36.17790985]),\n <BarContainer object of 25 artists>)"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}