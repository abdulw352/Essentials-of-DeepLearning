{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# We always start with a dataset to train on. Let's download the tiny shakespeare dataset\n!wget https://raw.githubusercontent.com/karpathy/char-rnn/master/data/tinyshakespeare/input.txt","metadata":{"execution":{"iopub.status.busy":"2024-07-26T20:05:12.214219Z","iopub.execute_input":"2024-07-26T20:05:12.214667Z","iopub.status.idle":"2024-07-26T20:05:13.731822Z","shell.execute_reply.started":"2024-07-26T20:05:12.214602Z","shell.execute_reply":"2024-07-26T20:05:13.729762Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"--2024-07-26 20:05:13--  https://raw.githubusercontent.com/karpathy/char-rnn/master/data/tinyshakespeare/input.txt\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.108.133, 185.199.111.133, 185.199.109.133, ...\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.108.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 1115394 (1.1M) [text/plain]\nSaving to: 'input.txt'\n\ninput.txt           100%[===================>]   1.06M  --.-KB/s    in 0.05s   \n\n2024-07-26 20:05:13 (23.1 MB/s) - 'input.txt' saved [1115394/1115394]\n\n","output_type":"stream"}]},{"cell_type":"code","source":"# read it in to inspect it\nwith open('input.txt', 'r', encoding='utf-8') as f:\n    text = f.read()","metadata":{"execution":{"iopub.status.busy":"2024-07-26T20:05:13.735171Z","iopub.execute_input":"2024-07-26T20:05:13.735753Z","iopub.status.idle":"2024-07-26T20:05:13.745219Z","shell.execute_reply.started":"2024-07-26T20:05:13.735695Z","shell.execute_reply":"2024-07-26T20:05:13.743609Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"print(\"length of dataset in characters: \", len(text))","metadata":{"execution":{"iopub.status.busy":"2024-07-26T20:05:13.747261Z","iopub.execute_input":"2024-07-26T20:05:13.747739Z","iopub.status.idle":"2024-07-26T20:05:13.757613Z","shell.execute_reply.started":"2024-07-26T20:05:13.747702Z","shell.execute_reply":"2024-07-26T20:05:13.756312Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"length of dataset in characters:  1115394\n","output_type":"stream"}]},{"cell_type":"code","source":"# let's look at the first 1000 characters\nprint(text[:1000])","metadata":{"execution":{"iopub.status.busy":"2024-07-26T20:05:13.761157Z","iopub.execute_input":"2024-07-26T20:05:13.761588Z","iopub.status.idle":"2024-07-26T20:05:13.773624Z","shell.execute_reply.started":"2024-07-26T20:05:13.761551Z","shell.execute_reply":"2024-07-26T20:05:13.772157Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"First Citizen:\nBefore we proceed any further, hear me speak.\n\nAll:\nSpeak, speak.\n\nFirst Citizen:\nYou are all resolved rather to die than to famish?\n\nAll:\nResolved. resolved.\n\nFirst Citizen:\nFirst, you know Caius Marcius is chief enemy to the people.\n\nAll:\nWe know't, we know't.\n\nFirst Citizen:\nLet us kill him, and we'll have corn at our own price.\nIs't a verdict?\n\nAll:\nNo more talking on't; let it be done: away, away!\n\nSecond Citizen:\nOne word, good citizens.\n\nFirst Citizen:\nWe are accounted poor citizens, the patricians good.\nWhat authority surfeits on would relieve us: if they\nwould yield us but the superfluity, while it were\nwholesome, we might guess they relieved us humanely;\nbut they think we are too dear: the leanness that\nafflicts us, the object of our misery, is as an\ninventory to particularise their abundance; our\nsufferance is a gain to them Let us revenge this with\nour pikes, ere we become rakes: for the gods know I\nspeak this in hunger for bread, not in thirst for revenge.\n\n\n","output_type":"stream"}]},{"cell_type":"code","source":"# here are all the unique characters that occur in this text\nchars = sorted(list(set(text)))\nvocab_size = len(chars)\nprint(''.join(chars))\nprint(vocab_size)","metadata":{"execution":{"iopub.status.busy":"2024-07-26T20:05:13.775559Z","iopub.execute_input":"2024-07-26T20:05:13.775979Z","iopub.status.idle":"2024-07-26T20:05:13.815902Z","shell.execute_reply.started":"2024-07-26T20:05:13.775945Z","shell.execute_reply":"2024-07-26T20:05:13.813373Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"\n !$&',-.3:;?ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\n65\n","output_type":"stream"}]},{"cell_type":"code","source":"# create a mapping from characters to integers\nstoi = { ch:i for i,ch in enumerate(chars) }\nitos = { i:ch for i,ch in enumerate(chars) }\nencode = lambda s: [stoi[c] for c in s] # encoder: take a string, output a list of integers\ndecode = lambda l: ''.join([itos[i] for i in l]) # decoder: take a list of integers, output a string\n\nprint(encode(\"hii there\"))\nprint(decode(encode(\"hii there\")))","metadata":{"execution":{"iopub.status.busy":"2024-07-26T20:05:13.818016Z","iopub.execute_input":"2024-07-26T20:05:13.818763Z","iopub.status.idle":"2024-07-26T20:05:13.833158Z","shell.execute_reply.started":"2024-07-26T20:05:13.818704Z","shell.execute_reply":"2024-07-26T20:05:13.831055Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"[46, 47, 47, 1, 58, 46, 43, 56, 43]\nhii there\n","output_type":"stream"}]},{"cell_type":"code","source":"# let's now encode the entire text dataset and store it into a torch.Tensor\nimport torch # we use PyTorch: https://pytorch.org\ndata = torch.tensor(encode(text), dtype=torch.long)\nprint(data.shape, data.dtype)\nprint(data[:1000]) # the 1000 characters we looked at earier will to the GPT look like this","metadata":{"execution":{"iopub.status.busy":"2024-07-26T20:05:13.836474Z","iopub.execute_input":"2024-07-26T20:05:13.839345Z","iopub.status.idle":"2024-07-26T20:05:18.288302Z","shell.execute_reply.started":"2024-07-26T20:05:13.839288Z","shell.execute_reply":"2024-07-26T20:05:18.286825Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"torch.Size([1115394]) torch.int64\ntensor([18, 47, 56, 57, 58,  1, 15, 47, 58, 47, 64, 43, 52, 10,  0, 14, 43, 44,\n        53, 56, 43,  1, 61, 43,  1, 54, 56, 53, 41, 43, 43, 42,  1, 39, 52, 63,\n         1, 44, 59, 56, 58, 46, 43, 56,  6,  1, 46, 43, 39, 56,  1, 51, 43,  1,\n        57, 54, 43, 39, 49,  8,  0,  0, 13, 50, 50, 10,  0, 31, 54, 43, 39, 49,\n         6,  1, 57, 54, 43, 39, 49,  8,  0,  0, 18, 47, 56, 57, 58,  1, 15, 47,\n        58, 47, 64, 43, 52, 10,  0, 37, 53, 59,  1, 39, 56, 43,  1, 39, 50, 50,\n         1, 56, 43, 57, 53, 50, 60, 43, 42,  1, 56, 39, 58, 46, 43, 56,  1, 58,\n        53,  1, 42, 47, 43,  1, 58, 46, 39, 52,  1, 58, 53,  1, 44, 39, 51, 47,\n        57, 46, 12,  0,  0, 13, 50, 50, 10,  0, 30, 43, 57, 53, 50, 60, 43, 42,\n         8,  1, 56, 43, 57, 53, 50, 60, 43, 42,  8,  0,  0, 18, 47, 56, 57, 58,\n         1, 15, 47, 58, 47, 64, 43, 52, 10,  0, 18, 47, 56, 57, 58,  6,  1, 63,\n        53, 59,  1, 49, 52, 53, 61,  1, 15, 39, 47, 59, 57,  1, 25, 39, 56, 41,\n        47, 59, 57,  1, 47, 57,  1, 41, 46, 47, 43, 44,  1, 43, 52, 43, 51, 63,\n         1, 58, 53,  1, 58, 46, 43,  1, 54, 43, 53, 54, 50, 43,  8,  0,  0, 13,\n        50, 50, 10,  0, 35, 43,  1, 49, 52, 53, 61,  5, 58,  6,  1, 61, 43,  1,\n        49, 52, 53, 61,  5, 58,  8,  0,  0, 18, 47, 56, 57, 58,  1, 15, 47, 58,\n        47, 64, 43, 52, 10,  0, 24, 43, 58,  1, 59, 57,  1, 49, 47, 50, 50,  1,\n        46, 47, 51,  6,  1, 39, 52, 42,  1, 61, 43,  5, 50, 50,  1, 46, 39, 60,\n        43,  1, 41, 53, 56, 52,  1, 39, 58,  1, 53, 59, 56,  1, 53, 61, 52,  1,\n        54, 56, 47, 41, 43,  8,  0, 21, 57,  5, 58,  1, 39,  1, 60, 43, 56, 42,\n        47, 41, 58, 12,  0,  0, 13, 50, 50, 10,  0, 26, 53,  1, 51, 53, 56, 43,\n         1, 58, 39, 50, 49, 47, 52, 45,  1, 53, 52,  5, 58, 11,  1, 50, 43, 58,\n         1, 47, 58,  1, 40, 43,  1, 42, 53, 52, 43, 10,  1, 39, 61, 39, 63,  6,\n         1, 39, 61, 39, 63,  2,  0,  0, 31, 43, 41, 53, 52, 42,  1, 15, 47, 58,\n        47, 64, 43, 52, 10,  0, 27, 52, 43,  1, 61, 53, 56, 42,  6,  1, 45, 53,\n        53, 42,  1, 41, 47, 58, 47, 64, 43, 52, 57,  8,  0,  0, 18, 47, 56, 57,\n        58,  1, 15, 47, 58, 47, 64, 43, 52, 10,  0, 35, 43,  1, 39, 56, 43,  1,\n        39, 41, 41, 53, 59, 52, 58, 43, 42,  1, 54, 53, 53, 56,  1, 41, 47, 58,\n        47, 64, 43, 52, 57,  6,  1, 58, 46, 43,  1, 54, 39, 58, 56, 47, 41, 47,\n        39, 52, 57,  1, 45, 53, 53, 42,  8,  0, 35, 46, 39, 58,  1, 39, 59, 58,\n        46, 53, 56, 47, 58, 63,  1, 57, 59, 56, 44, 43, 47, 58, 57,  1, 53, 52,\n         1, 61, 53, 59, 50, 42,  1, 56, 43, 50, 47, 43, 60, 43,  1, 59, 57, 10,\n         1, 47, 44,  1, 58, 46, 43, 63,  0, 61, 53, 59, 50, 42,  1, 63, 47, 43,\n        50, 42,  1, 59, 57,  1, 40, 59, 58,  1, 58, 46, 43,  1, 57, 59, 54, 43,\n        56, 44, 50, 59, 47, 58, 63,  6,  1, 61, 46, 47, 50, 43,  1, 47, 58,  1,\n        61, 43, 56, 43,  0, 61, 46, 53, 50, 43, 57, 53, 51, 43,  6,  1, 61, 43,\n         1, 51, 47, 45, 46, 58,  1, 45, 59, 43, 57, 57,  1, 58, 46, 43, 63,  1,\n        56, 43, 50, 47, 43, 60, 43, 42,  1, 59, 57,  1, 46, 59, 51, 39, 52, 43,\n        50, 63, 11,  0, 40, 59, 58,  1, 58, 46, 43, 63,  1, 58, 46, 47, 52, 49,\n         1, 61, 43,  1, 39, 56, 43,  1, 58, 53, 53,  1, 42, 43, 39, 56, 10,  1,\n        58, 46, 43,  1, 50, 43, 39, 52, 52, 43, 57, 57,  1, 58, 46, 39, 58,  0,\n        39, 44, 44, 50, 47, 41, 58, 57,  1, 59, 57,  6,  1, 58, 46, 43,  1, 53,\n        40, 48, 43, 41, 58,  1, 53, 44,  1, 53, 59, 56,  1, 51, 47, 57, 43, 56,\n        63,  6,  1, 47, 57,  1, 39, 57,  1, 39, 52,  0, 47, 52, 60, 43, 52, 58,\n        53, 56, 63,  1, 58, 53,  1, 54, 39, 56, 58, 47, 41, 59, 50, 39, 56, 47,\n        57, 43,  1, 58, 46, 43, 47, 56,  1, 39, 40, 59, 52, 42, 39, 52, 41, 43,\n        11,  1, 53, 59, 56,  0, 57, 59, 44, 44, 43, 56, 39, 52, 41, 43,  1, 47,\n        57,  1, 39,  1, 45, 39, 47, 52,  1, 58, 53,  1, 58, 46, 43, 51,  1, 24,\n        43, 58,  1, 59, 57,  1, 56, 43, 60, 43, 52, 45, 43,  1, 58, 46, 47, 57,\n         1, 61, 47, 58, 46,  0, 53, 59, 56,  1, 54, 47, 49, 43, 57,  6,  1, 43,\n        56, 43,  1, 61, 43,  1, 40, 43, 41, 53, 51, 43,  1, 56, 39, 49, 43, 57,\n        10,  1, 44, 53, 56,  1, 58, 46, 43,  1, 45, 53, 42, 57,  1, 49, 52, 53,\n        61,  1, 21,  0, 57, 54, 43, 39, 49,  1, 58, 46, 47, 57,  1, 47, 52,  1,\n        46, 59, 52, 45, 43, 56,  1, 44, 53, 56,  1, 40, 56, 43, 39, 42,  6,  1,\n        52, 53, 58,  1, 47, 52,  1, 58, 46, 47, 56, 57, 58,  1, 44, 53, 56,  1,\n        56, 43, 60, 43, 52, 45, 43,  8,  0,  0])\n","output_type":"stream"}]},{"cell_type":"code","source":"# Let's now split up the data into train and validation sets\nn = int(0.9*len(data)) # first 90% will be train, rest val\ntrain_data = data[:n]\nval_data = data[n:]","metadata":{"execution":{"iopub.status.busy":"2024-07-26T20:05:18.290158Z","iopub.execute_input":"2024-07-26T20:05:18.290841Z","iopub.status.idle":"2024-07-26T20:05:18.298726Z","shell.execute_reply.started":"2024-07-26T20:05:18.290795Z","shell.execute_reply":"2024-07-26T20:05:18.297237Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"block_size = 8\ntrain_data[:block_size+1]","metadata":{"execution":{"iopub.status.busy":"2024-07-26T20:05:18.302760Z","iopub.execute_input":"2024-07-26T20:05:18.303249Z","iopub.status.idle":"2024-07-26T20:05:18.320980Z","shell.execute_reply.started":"2024-07-26T20:05:18.303200Z","shell.execute_reply":"2024-07-26T20:05:18.319709Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"tensor([18, 47, 56, 57, 58,  1, 15, 47, 58])"},"metadata":{}}]},{"cell_type":"code","source":"x = train_data[:block_size]\ny = train_data[1:block_size+1]\nfor t in range(block_size):\n    context = x[:t+1]\n    target = y[t]\n    print(f\"when input is {context} the target: {target}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-26T20:05:18.322629Z","iopub.execute_input":"2024-07-26T20:05:18.323136Z","iopub.status.idle":"2024-07-26T20:05:18.341413Z","shell.execute_reply.started":"2024-07-26T20:05:18.323083Z","shell.execute_reply":"2024-07-26T20:05:18.340131Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"when input is tensor([18]) the target: 47\nwhen input is tensor([18, 47]) the target: 56\nwhen input is tensor([18, 47, 56]) the target: 57\nwhen input is tensor([18, 47, 56, 57]) the target: 58\nwhen input is tensor([18, 47, 56, 57, 58]) the target: 1\nwhen input is tensor([18, 47, 56, 57, 58,  1]) the target: 15\nwhen input is tensor([18, 47, 56, 57, 58,  1, 15]) the target: 47\nwhen input is tensor([18, 47, 56, 57, 58,  1, 15, 47]) the target: 58\n","output_type":"stream"}]},{"cell_type":"code","source":"torch.manual_seed(1337)\nbatch_size = 4 # how many independent sequences will we process in parallel?\nblock_size = 8 # what is the maximum context length for predictions?\n\ndef get_batch(split):\n    # generate a small batch of data of inputs x and targets y\n    data = train_data if split == 'train' else val_data\n    ix = torch.randint(len(data) - block_size, (batch_size,))\n    x = torch.stack([data[i:i+block_size] for i in ix])\n    y = torch.stack([data[i+1:i+block_size+1] for i in ix])\n    return x, y\n\nxb, yb = get_batch('train')\nprint('inputs:')\nprint(xb.shape)\nprint(xb)\nprint('targets:')\nprint(yb.shape)\nprint(yb)\n\nprint('----')\n\nfor b in range(batch_size): # batch dimension\n    for t in range(block_size): # time dimension\n        context = xb[b, :t+1]\n        target = yb[b,t]\n        print(f\"when input is {decode(context.tolist())} | the target: {decode([target.item()])}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-26T20:21:21.668843Z","iopub.execute_input":"2024-07-26T20:21:21.669274Z","iopub.status.idle":"2024-07-26T20:21:21.686552Z","shell.execute_reply.started":"2024-07-26T20:21:21.669240Z","shell.execute_reply":"2024-07-26T20:21:21.685193Z"},"trusted":true},"execution_count":38,"outputs":[{"name":"stdout","text":"inputs:\ntorch.Size([4, 8])\ntensor([[24, 43, 58,  5, 57,  1, 46, 43],\n        [44, 53, 56,  1, 58, 46, 39, 58],\n        [52, 58,  1, 58, 46, 39, 58,  1],\n        [25, 17, 27, 10,  0, 21,  1, 54]])\ntargets:\ntorch.Size([4, 8])\ntensor([[43, 58,  5, 57,  1, 46, 43, 39],\n        [53, 56,  1, 58, 46, 39, 58,  1],\n        [58,  1, 58, 46, 39, 58,  1, 46],\n        [17, 27, 10,  0, 21,  1, 54, 39]])\n----\nwhen input is L | the target: e\nwhen input is Le | the target: t\nwhen input is Let | the target: '\nwhen input is Let' | the target: s\nwhen input is Let's | the target:  \nwhen input is Let's  | the target: h\nwhen input is Let's h | the target: e\nwhen input is Let's he | the target: a\nwhen input is f | the target: o\nwhen input is fo | the target: r\nwhen input is for | the target:  \nwhen input is for  | the target: t\nwhen input is for t | the target: h\nwhen input is for th | the target: a\nwhen input is for tha | the target: t\nwhen input is for that | the target:  \nwhen input is n | the target: t\nwhen input is nt | the target:  \nwhen input is nt  | the target: t\nwhen input is nt t | the target: h\nwhen input is nt th | the target: a\nwhen input is nt tha | the target: t\nwhen input is nt that | the target:  \nwhen input is nt that  | the target: h\nwhen input is M | the target: E\nwhen input is ME | the target: O\nwhen input is MEO | the target: :\nwhen input is MEO: | the target: \n\nwhen input is MEO:\n | the target: I\nwhen input is MEO:\nI | the target:  \nwhen input is MEO:\nI  | the target: p\nwhen input is MEO:\nI p | the target: a\n","output_type":"stream"}]},{"cell_type":"code","source":"torch.manual_seed(1337)\nbatch_size = 4 # how many independent sequences will we process in parallel?\nblock_size = 8 # what is the maximum context length for predictions?\n\ndef get_batch(split):\n    # generate a small batch of data of inputs x and targets y\n    data = train_data if split == 'train' else val_data\n    ix = torch.randint(len(data) - block_size, (batch_size,))\n    x = torch.stack([data[i:i+block_size] for i in ix])\n    y = torch.stack([data[i+1:i+block_size+1] for i in ix])\n    return x, y\n\nxb, yb = get_batch('train')\nprint('inputs:')\nprint(xb.shape)\nprint(xb)\nprint('targets:')\nprint(yb.shape)\nprint(yb)\n\nprint('----')\n\nfor b in range(batch_size): # batch dimension\n    for t in range(block_size): # time dimension\n        context = xb[b, :t+1]\n        target = yb[b,t]\n        print(f\"when input is {context.tolist()} the target: {target}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-26T20:05:18.343165Z","iopub.execute_input":"2024-07-26T20:05:18.343535Z","iopub.status.idle":"2024-07-26T20:05:18.403220Z","shell.execute_reply.started":"2024-07-26T20:05:18.343501Z","shell.execute_reply":"2024-07-26T20:05:18.401758Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"inputs:\ntorch.Size([4, 8])\ntensor([[24, 43, 58,  5, 57,  1, 46, 43],\n        [44, 53, 56,  1, 58, 46, 39, 58],\n        [52, 58,  1, 58, 46, 39, 58,  1],\n        [25, 17, 27, 10,  0, 21,  1, 54]])\ntargets:\ntorch.Size([4, 8])\ntensor([[43, 58,  5, 57,  1, 46, 43, 39],\n        [53, 56,  1, 58, 46, 39, 58,  1],\n        [58,  1, 58, 46, 39, 58,  1, 46],\n        [17, 27, 10,  0, 21,  1, 54, 39]])\n----\nwhen input is [24] the target: 43\nwhen input is [24, 43] the target: 58\nwhen input is [24, 43, 58] the target: 5\nwhen input is [24, 43, 58, 5] the target: 57\nwhen input is [24, 43, 58, 5, 57] the target: 1\nwhen input is [24, 43, 58, 5, 57, 1] the target: 46\nwhen input is [24, 43, 58, 5, 57, 1, 46] the target: 43\nwhen input is [24, 43, 58, 5, 57, 1, 46, 43] the target: 39\nwhen input is [44] the target: 53\nwhen input is [44, 53] the target: 56\nwhen input is [44, 53, 56] the target: 1\nwhen input is [44, 53, 56, 1] the target: 58\nwhen input is [44, 53, 56, 1, 58] the target: 46\nwhen input is [44, 53, 56, 1, 58, 46] the target: 39\nwhen input is [44, 53, 56, 1, 58, 46, 39] the target: 58\nwhen input is [44, 53, 56, 1, 58, 46, 39, 58] the target: 1\nwhen input is [52] the target: 58\nwhen input is [52, 58] the target: 1\nwhen input is [52, 58, 1] the target: 58\nwhen input is [52, 58, 1, 58] the target: 46\nwhen input is [52, 58, 1, 58, 46] the target: 39\nwhen input is [52, 58, 1, 58, 46, 39] the target: 58\nwhen input is [52, 58, 1, 58, 46, 39, 58] the target: 1\nwhen input is [52, 58, 1, 58, 46, 39, 58, 1] the target: 46\nwhen input is [25] the target: 17\nwhen input is [25, 17] the target: 27\nwhen input is [25, 17, 27] the target: 10\nwhen input is [25, 17, 27, 10] the target: 0\nwhen input is [25, 17, 27, 10, 0] the target: 21\nwhen input is [25, 17, 27, 10, 0, 21] the target: 1\nwhen input is [25, 17, 27, 10, 0, 21, 1] the target: 54\nwhen input is [25, 17, 27, 10, 0, 21, 1, 54] the target: 39\n","output_type":"stream"}]},{"cell_type":"code","source":"print(xb) # our input to the transformer","metadata":{"execution":{"iopub.status.busy":"2024-07-26T20:05:18.405102Z","iopub.execute_input":"2024-07-26T20:05:18.405503Z","iopub.status.idle":"2024-07-26T20:05:18.415670Z","shell.execute_reply.started":"2024-07-26T20:05:18.405468Z","shell.execute_reply":"2024-07-26T20:05:18.413276Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"tensor([[24, 43, 58,  5, 57,  1, 46, 43],\n        [44, 53, 56,  1, 58, 46, 39, 58],\n        [52, 58,  1, 58, 46, 39, 58,  1],\n        [25, 17, 27, 10,  0, 21,  1, 54]])\n","output_type":"stream"}]},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nfrom torch.nn import functional as F\ntorch.manual_seed(1337)\n\nclass BigramLanguageModel(nn.Module):\n\n    def __init__(self, vocab_size):\n        super().__init__()\n        # each token directly reads off the logits for the next token from a lookup table\n        self.token_embedding_table = nn.Embedding(vocab_size, vocab_size)\n\n    def forward(self, idx, targets=None):\n\n        # idx and targets are both (B,T) tensor of integers\n        logits = self.token_embedding_table(idx) # (B,T,C)\n\n        if targets is None:\n            loss = None\n        else:\n            B, T, C = logits.shape\n            logits = logits.view(B*T, C)\n            targets = targets.view(B*T)\n            loss = F.cross_entropy(logits, targets)\n\n        return logits, loss\n\n    def generate(self, idx, max_new_tokens):\n        # idx is (B, T) array of indices in the current context\n        for _ in range(max_new_tokens):\n            # get the predictions\n            logits, loss = self(idx)\n            # focus only on the last time step\n            logits = logits[:, -1, :] # becomes (B, C)\n            # apply softmax to get probabilities\n            probs = F.softmax(logits, dim=-1) # (B, C)\n            # sample from the distribution\n            idx_next = torch.multinomial(probs, num_samples=1) # (B, 1)\n            # append sampled index to the running sequence\n            idx = torch.cat((idx, idx_next), dim=1) # (B, T+1)\n        return idx\n\nm = BigramLanguageModel(vocab_size)\nlogits, loss = m(xb, yb)\nprint(logits.shape)\nprint(loss)\n\nprint(decode(m.generate(idx = torch.zeros((1, 1), dtype=torch.long), max_new_tokens=100)[0].tolist()))","metadata":{"execution":{"iopub.status.busy":"2024-07-26T20:05:31.034097Z","iopub.execute_input":"2024-07-26T20:05:31.034707Z","iopub.status.idle":"2024-07-26T20:05:31.183019Z","shell.execute_reply.started":"2024-07-26T20:05:31.034636Z","shell.execute_reply":"2024-07-26T20:05:31.181260Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"torch.Size([32, 65])\ntensor(4.8786, grad_fn=<NllLossBackward0>)\n\nSr?qP-QWktXoL&jLDJgOLVz'RIoDqHdhsV&vLLxatjscMpwLERSPyao.qfzs$Ys$zF-w,;eEkzxjgCKFChs!iWW.ObzDnxA Ms$3\n","output_type":"stream"}]},{"cell_type":"code","source":"# create a PyTorch optimizer\noptimizer = torch.optim.AdamW(m.parameters(), lr=1e-3)","metadata":{"execution":{"iopub.status.busy":"2024-07-26T20:05:34.631196Z","iopub.execute_input":"2024-07-26T20:05:34.631608Z","iopub.status.idle":"2024-07-26T20:05:36.462863Z","shell.execute_reply.started":"2024-07-26T20:05:34.631575Z","shell.execute_reply":"2024-07-26T20:05:36.461187Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"batch_size = 32\nfor steps in range(100): # increase number of steps for good results...\n\n    # sample a batch of data\n    xb, yb = get_batch('train')\n\n    # evaluate the loss\n    logits, loss = m(xb, yb)\n    optimizer.zero_grad(set_to_none=True)\n    loss.backward()\n    optimizer.step()\n\nprint(loss.item())","metadata":{"execution":{"iopub.status.busy":"2024-07-26T20:05:36.465483Z","iopub.execute_input":"2024-07-26T20:05:36.466193Z","iopub.status.idle":"2024-07-26T20:05:36.708178Z","shell.execute_reply.started":"2024-07-26T20:05:36.466147Z","shell.execute_reply":"2024-07-26T20:05:36.706971Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"4.587916374206543\n","output_type":"stream"}]},{"cell_type":"code","source":"print(decode(m.generate(idx = torch.zeros((1, 1), dtype=torch.long), max_new_tokens=500)[0].tolist()))","metadata":{"execution":{"iopub.status.busy":"2024-07-26T20:05:36.709458Z","iopub.execute_input":"2024-07-26T20:05:36.709850Z","iopub.status.idle":"2024-07-26T20:05:36.785833Z","shell.execute_reply.started":"2024-07-26T20:05:36.709816Z","shell.execute_reply":"2024-07-26T20:05:36.784561Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"\nxiKi-RJ:CgqVuUa!U?qMH.uk!sCuMXvv!CJFfx;LgRyJknOEti.?I&-gPlLyulId?XlaInQ'q,lT$\n3Q&sGlvHQ?mqSq-eON\nx?SP fUAfCAuCX:bOlgiRQWN:Mphaw\ntRLKuYXEaAXxrcq-gCUzeh3w!AcyaylgYWjmJM?Uzw:inaY,:C&OECW:vmGGJAn3onAuMgia!ms$Vb q-gCOcPcUhOnxJGUGSPJWT:.?ujmJFoiNL&A'DxY,prZ?qdT;hoo'dHooXXlxf'WkHK&u3Q?rqUi.kz;?Yx?C&u3Qbfzxlyh'Vl:zyxjKXgC?\nlv'QKFiBeviNxO'm!Upm$srm&TqViqiBD3HBP!juEOpmZJyF$Fwfy!PlvWPFC\n&WDdP!Ko,px\nx\ntREOE;AJ.BeXkylOVD3KHp$e?nD,.SFbWWI'ubcL!q-tU;aXmJ&uGXHxJXI&Z!gHRpajj;l.\npTErIBjx;JKIgoCnLGXrJSP!AU-AcbczR?\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## The Mathematical trick in Self-attention","metadata":{}},{"cell_type":"code","source":"# toy example illustrating how matrix multiplication can be used for a \"weighted aggregation\"\ntorch.manual_seed(42)\na = torch.tril(torch.ones(3, 3))\na = a / torch.sum(a, 1, keepdim=True)\nb = torch.randint(0,10,(3,2)).float()\nc = a @ b\nprint('a=')\nprint(a)\nprint('--')\nprint('b=')\nprint(b)\nprint('--')\nprint('c=')\nprint(c)","metadata":{"execution":{"iopub.status.busy":"2024-07-26T20:05:44.363880Z","iopub.execute_input":"2024-07-26T20:05:44.364353Z","iopub.status.idle":"2024-07-26T20:05:44.393575Z","shell.execute_reply.started":"2024-07-26T20:05:44.364316Z","shell.execute_reply":"2024-07-26T20:05:44.392164Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"a=\ntensor([[1.0000, 0.0000, 0.0000],\n        [0.5000, 0.5000, 0.0000],\n        [0.3333, 0.3333, 0.3333]])\n--\nb=\ntensor([[2., 7.],\n        [6., 4.],\n        [6., 5.]])\n--\nc=\ntensor([[2.0000, 7.0000],\n        [4.0000, 5.5000],\n        [4.6667, 5.3333]])\n","output_type":"stream"}]},{"cell_type":"code","source":"# consider the following toy example:\n\ntorch.manual_seed(1337)\nB,T,C = 4,8,2 # batch, time, channels\nx = torch.randn(B,T,C)\nx.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-26T20:05:47.187803Z","iopub.execute_input":"2024-07-26T20:05:47.188250Z","iopub.status.idle":"2024-07-26T20:05:47.199103Z","shell.execute_reply.started":"2024-07-26T20:05:47.188216Z","shell.execute_reply":"2024-07-26T20:05:47.197603Z"},"trusted":true},"execution_count":19,"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"torch.Size([4, 8, 2])"},"metadata":{}}]},{"cell_type":"code","source":"# We want x[b,t] = mean_{i<=t} x[b,i]\nxbow = torch.zeros((B,T,C))\nfor b in range(B):\n    for t in range(T):\n        xprev = x[b,:t+1] # (t,C)\n        xbow[b,t] = torch.mean(xprev, 0)","metadata":{"execution":{"iopub.status.busy":"2024-07-26T20:05:47.400701Z","iopub.execute_input":"2024-07-26T20:05:47.401111Z","iopub.status.idle":"2024-07-26T20:05:47.410160Z","shell.execute_reply.started":"2024-07-26T20:05:47.401079Z","shell.execute_reply":"2024-07-26T20:05:47.408412Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"# version 2: using matrix multiply for a weighted aggregation\nwei = torch.tril(torch.ones(T, T))\nwei = wei / wei.sum(1, keepdim=True)\nxbow2 = wei @ x # (B, T, T) @ (B, T, C) ----> (B, T, C)\ntorch.allclose(xbow, xbow2)","metadata":{"execution":{"iopub.status.busy":"2024-07-26T20:05:47.568036Z","iopub.execute_input":"2024-07-26T20:05:47.568443Z","iopub.status.idle":"2024-07-26T20:05:47.582437Z","shell.execute_reply.started":"2024-07-26T20:05:47.568414Z","shell.execute_reply":"2024-07-26T20:05:47.581072Z"},"trusted":true},"execution_count":21,"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"False"},"metadata":{}}]},{"cell_type":"code","source":"# version 3: use Softmax\ntril = torch.tril(torch.ones(T, T))\nwei = torch.zeros((T,T))\nwei = wei.masked_fill(tril == 0, float('-inf'))\nwei = F.softmax(wei, dim=-1)\nxbow3 = wei @ x\ntorch.allclose(xbow, xbow3)","metadata":{"execution":{"iopub.status.busy":"2024-07-26T20:05:48.448132Z","iopub.execute_input":"2024-07-26T20:05:48.448568Z","iopub.status.idle":"2024-07-26T20:05:48.463212Z","shell.execute_reply.started":"2024-07-26T20:05:48.448532Z","shell.execute_reply":"2024-07-26T20:05:48.461711Z"},"trusted":true},"execution_count":22,"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"False"},"metadata":{}}]},{"cell_type":"code","source":"# version 4: self-attention!\ntorch.manual_seed(1337)\nB,T,C = 4,8,32 # batch, time, channels\nx = torch.randn(B,T,C)\n\n# let's see a single Head perform self-attention\nhead_size = 16\nkey = nn.Linear(C, head_size, bias=False)\nquery = nn.Linear(C, head_size, bias=False)\nvalue = nn.Linear(C, head_size, bias=False)\nk = key(x)   # (B, T, 16)\nq = query(x) # (B, T, 16)\nwei =  q @ k.transpose(-2, -1) # (B, T, 16) @ (B, 16, T) ---> (B, T, T)\n\ntril = torch.tril(torch.ones(T, T))\n#wei = torch.zeros((T,T))\nwei = wei.masked_fill(tril == 0, float('-inf'))\nwei = F.softmax(wei, dim=-1)\n\nv = value(x)\nout = wei @ v\n#out = wei @ x\n\nout.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-26T20:05:49.207447Z","iopub.execute_input":"2024-07-26T20:05:49.209050Z","iopub.status.idle":"2024-07-26T20:05:49.232338Z","shell.execute_reply.started":"2024-07-26T20:05:49.208999Z","shell.execute_reply":"2024-07-26T20:05:49.230405Z"},"trusted":true},"execution_count":23,"outputs":[{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"torch.Size([4, 8, 16])"},"metadata":{}}]},{"cell_type":"code","source":"wei[0]","metadata":{"execution":{"iopub.status.busy":"2024-07-26T20:05:50.660054Z","iopub.execute_input":"2024-07-26T20:05:50.660458Z","iopub.status.idle":"2024-07-26T20:05:50.670517Z","shell.execute_reply.started":"2024-07-26T20:05:50.660428Z","shell.execute_reply":"2024-07-26T20:05:50.668840Z"},"trusted":true},"execution_count":24,"outputs":[{"execution_count":24,"output_type":"execute_result","data":{"text/plain":"tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],\n        [0.1574, 0.8426, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],\n        [0.2088, 0.1646, 0.6266, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],\n        [0.5792, 0.1187, 0.1889, 0.1131, 0.0000, 0.0000, 0.0000, 0.0000],\n        [0.0294, 0.1052, 0.0469, 0.0276, 0.7909, 0.0000, 0.0000, 0.0000],\n        [0.0176, 0.2689, 0.0215, 0.0089, 0.6812, 0.0019, 0.0000, 0.0000],\n        [0.1691, 0.4066, 0.0438, 0.0416, 0.1048, 0.2012, 0.0329, 0.0000],\n        [0.0210, 0.0843, 0.0555, 0.2297, 0.0573, 0.0709, 0.2423, 0.2391]],\n       grad_fn=<SelectBackward0>)"},"metadata":{}}]},{"cell_type":"markdown","source":"Notes:\n- Attention is a **communication mechanism**. Can be seen as nodes in a directed graph looking at each other and aggregating information with a weighted sum from all nodes that point to them, with data-dependent weights.\n- There is no notion of space. Attention simply acts over a set of vectors. This is why we need to positionally encode tokens.\n- Each example across batch dimension is of course processed completely independently and never \"talk\" to each other\n- In an \"encoder\" attention block just delete the single line that does masking with `tril`, allowing all tokens to communicate. This block here is called a \"decoder\" attention block because it has triangular masking, and is usually used in autoregressive settings, like language modeling.\n- \"self-attention\" just means that the keys and values are produced from the same source as queries. In \"cross-attention\", the queries still get produced from x, but the keys and values come from some other, external source (e.g. an encoder module)\n- \"Scaled\" attention additional divides `wei` by 1/sqrt(head_size). This makes it so when input Q,K are unit variance, wei will be unit variance too and Softmax will stay diffuse and not saturate too much. Illustration below","metadata":{}},{"cell_type":"code","source":"k = torch.randn(B,T,head_size)\nq = torch.randn(B,T,head_size)\nwei = q @ k.transpose(-2, -1) * head_size**-0.5","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"k.var()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"q.var()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"wei.var()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"torch.softmax(torch.tensor([0.1, -0.2, 0.3, -0.2, 0.5]), dim=-1)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"torch.softmax(torch.tensor([0.1, -0.2, 0.3, -0.2, 0.5])*8, dim=-1) # gets too peaky, converges to one-hot","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"class LayerNorm1d: # (used to be BatchNorm1d)\n\n    def __init__(self, dim, eps=1e-5, momentum=0.1):\n        self.eps = eps\n        self.gamma = torch.ones(dim)\n        self.beta = torch.zeros(dim)\n\n    def __call__(self, x):\n        # calculate the forward pass\n        xmean = x.mean(1, keepdim=True) # batch mean\n        xvar = x.var(1, keepdim=True) # batch variance\n        xhat = (x - xmean) / torch.sqrt(xvar + self.eps) # normalize to unit variance\n        self.out = self.gamma * xhat + self.beta\n        return self.out\n\n    def parameters(self):\n        return [self.gamma, self.beta]\n\ntorch.manual_seed(1337)\nmodule = LayerNorm1d(100)\nx = torch.randn(32, 100) # batch size 32 of 100-dimensional vectors\nx = module(x)\nx.shape","metadata":{},"execution_count":null,"outputs":[]}]}