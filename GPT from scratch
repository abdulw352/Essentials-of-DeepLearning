{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# We always start with a dataset to train on. Let's download the tiny shakespeare dataset\n!wget https://raw.githubusercontent.com/karpathy/char-rnn/master/data/tinyshakespeare/input.txt","metadata":{"execution":{"iopub.status.busy":"2024-07-29T14:59:40.700095Z","iopub.execute_input":"2024-07-29T14:59:40.700481Z","iopub.status.idle":"2024-07-29T14:59:41.950001Z","shell.execute_reply.started":"2024-07-29T14:59:40.700447Z","shell.execute_reply":"2024-07-29T14:59:41.948495Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"--2024-07-29 14:59:41--  https://raw.githubusercontent.com/karpathy/char-rnn/master/data/tinyshakespeare/input.txt\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.111.133, 185.199.109.133, 185.199.110.133, ...\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.111.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 1115394 (1.1M) [text/plain]\nSaving to: 'input.txt.1'\n\ninput.txt.1         100%[===================>]   1.06M  --.-KB/s    in 0.05s   \n\n2024-07-29 14:59:41 (22.5 MB/s) - 'input.txt.1' saved [1115394/1115394]\n\n","output_type":"stream"}]},{"cell_type":"code","source":"# read it in to inspect it\nwith open('input.txt', 'r', encoding='utf-8') as f:\n    text = f.read()","metadata":{"execution":{"iopub.status.busy":"2024-07-29T14:59:41.952093Z","iopub.execute_input":"2024-07-29T14:59:41.953134Z","iopub.status.idle":"2024-07-29T14:59:41.960916Z","shell.execute_reply.started":"2024-07-29T14:59:41.953084Z","shell.execute_reply":"2024-07-29T14:59:41.959747Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"print(\"length of dataset in characters: \", len(text))","metadata":{"execution":{"iopub.status.busy":"2024-07-29T14:59:41.962241Z","iopub.execute_input":"2024-07-29T14:59:41.962595Z","iopub.status.idle":"2024-07-29T14:59:41.973229Z","shell.execute_reply.started":"2024-07-29T14:59:41.962565Z","shell.execute_reply":"2024-07-29T14:59:41.971843Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"length of dataset in characters:  1115394\n","output_type":"stream"}]},{"cell_type":"code","source":"# let's look at the first 1000 characters\nprint(text[:1000])","metadata":{"execution":{"iopub.status.busy":"2024-07-29T14:59:41.974905Z","iopub.execute_input":"2024-07-29T14:59:41.975357Z","iopub.status.idle":"2024-07-29T14:59:41.986211Z","shell.execute_reply.started":"2024-07-29T14:59:41.975325Z","shell.execute_reply":"2024-07-29T14:59:41.984729Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"First Citizen:\nBefore we proceed any further, hear me speak.\n\nAll:\nSpeak, speak.\n\nFirst Citizen:\nYou are all resolved rather to die than to famish?\n\nAll:\nResolved. resolved.\n\nFirst Citizen:\nFirst, you know Caius Marcius is chief enemy to the people.\n\nAll:\nWe know't, we know't.\n\nFirst Citizen:\nLet us kill him, and we'll have corn at our own price.\nIs't a verdict?\n\nAll:\nNo more talking on't; let it be done: away, away!\n\nSecond Citizen:\nOne word, good citizens.\n\nFirst Citizen:\nWe are accounted poor citizens, the patricians good.\nWhat authority surfeits on would relieve us: if they\nwould yield us but the superfluity, while it were\nwholesome, we might guess they relieved us humanely;\nbut they think we are too dear: the leanness that\nafflicts us, the object of our misery, is as an\ninventory to particularise their abundance; our\nsufferance is a gain to them Let us revenge this with\nour pikes, ere we become rakes: for the gods know I\nspeak this in hunger for bread, not in thirst for revenge.\n\n\n","output_type":"stream"}]},{"cell_type":"code","source":"# here are all the unique characters that occur in this text\nchars = sorted(list(set(text)))\nvocab_size = len(chars)\nprint(''.join(chars))\nprint(vocab_size)","metadata":{"execution":{"iopub.status.busy":"2024-07-29T14:59:41.988332Z","iopub.execute_input":"2024-07-29T14:59:41.988883Z","iopub.status.idle":"2024-07-29T14:59:42.021339Z","shell.execute_reply.started":"2024-07-29T14:59:41.988829Z","shell.execute_reply":"2024-07-29T14:59:42.020015Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"\n !$&',-.3:;?ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\n65\n","output_type":"stream"}]},{"cell_type":"code","source":"# create a mapping from characters to integers\nstoi = { ch:i for i,ch in enumerate(chars) }\nitos = { i:ch for i,ch in enumerate(chars) }\nencode = lambda s: [stoi[c] for c in s] # encoder: take a string, output a list of integers\ndecode = lambda l: ''.join([itos[i] for i in l]) # decoder: take a list of integers, output a string\n\nprint(encode(\"hii there\"))\nprint(decode(encode(\"hii there\")))","metadata":{"execution":{"iopub.status.busy":"2024-07-29T14:59:47.389956Z","iopub.execute_input":"2024-07-29T14:59:47.390375Z","iopub.status.idle":"2024-07-29T14:59:47.399283Z","shell.execute_reply.started":"2024-07-29T14:59:47.390344Z","shell.execute_reply":"2024-07-29T14:59:47.397903Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"[46, 47, 47, 1, 58, 46, 43, 56, 43]\nhii there\n","output_type":"stream"}]},{"cell_type":"code","source":"from tqdm.notebook import tqdm","metadata":{"execution":{"iopub.status.busy":"2024-07-29T14:59:47.758886Z","iopub.execute_input":"2024-07-29T14:59:47.759295Z","iopub.status.idle":"2024-07-29T14:59:47.878885Z","shell.execute_reply.started":"2024-07-29T14:59:47.759264Z","shell.execute_reply":"2024-07-29T14:59:47.877722Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"# let's now encode the entire text dataset and store it into a torch.Tensor\nimport torch # we use PyTorch: https://pytorch.org\ndata = torch.tensor(encode(text), dtype=torch.long)\nprint(data.shape, data.dtype)\nprint(data[:1000]) # the 1000 characters we looked at earier will to the GPT look like this","metadata":{"execution":{"iopub.status.busy":"2024-07-29T14:59:48.361118Z","iopub.execute_input":"2024-07-29T14:59:48.361565Z","iopub.status.idle":"2024-07-29T14:59:52.672764Z","shell.execute_reply.started":"2024-07-29T14:59:48.361532Z","shell.execute_reply":"2024-07-29T14:59:52.671334Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"torch.Size([1115394]) torch.int64\ntensor([18, 47, 56, 57, 58,  1, 15, 47, 58, 47, 64, 43, 52, 10,  0, 14, 43, 44,\n        53, 56, 43,  1, 61, 43,  1, 54, 56, 53, 41, 43, 43, 42,  1, 39, 52, 63,\n         1, 44, 59, 56, 58, 46, 43, 56,  6,  1, 46, 43, 39, 56,  1, 51, 43,  1,\n        57, 54, 43, 39, 49,  8,  0,  0, 13, 50, 50, 10,  0, 31, 54, 43, 39, 49,\n         6,  1, 57, 54, 43, 39, 49,  8,  0,  0, 18, 47, 56, 57, 58,  1, 15, 47,\n        58, 47, 64, 43, 52, 10,  0, 37, 53, 59,  1, 39, 56, 43,  1, 39, 50, 50,\n         1, 56, 43, 57, 53, 50, 60, 43, 42,  1, 56, 39, 58, 46, 43, 56,  1, 58,\n        53,  1, 42, 47, 43,  1, 58, 46, 39, 52,  1, 58, 53,  1, 44, 39, 51, 47,\n        57, 46, 12,  0,  0, 13, 50, 50, 10,  0, 30, 43, 57, 53, 50, 60, 43, 42,\n         8,  1, 56, 43, 57, 53, 50, 60, 43, 42,  8,  0,  0, 18, 47, 56, 57, 58,\n         1, 15, 47, 58, 47, 64, 43, 52, 10,  0, 18, 47, 56, 57, 58,  6,  1, 63,\n        53, 59,  1, 49, 52, 53, 61,  1, 15, 39, 47, 59, 57,  1, 25, 39, 56, 41,\n        47, 59, 57,  1, 47, 57,  1, 41, 46, 47, 43, 44,  1, 43, 52, 43, 51, 63,\n         1, 58, 53,  1, 58, 46, 43,  1, 54, 43, 53, 54, 50, 43,  8,  0,  0, 13,\n        50, 50, 10,  0, 35, 43,  1, 49, 52, 53, 61,  5, 58,  6,  1, 61, 43,  1,\n        49, 52, 53, 61,  5, 58,  8,  0,  0, 18, 47, 56, 57, 58,  1, 15, 47, 58,\n        47, 64, 43, 52, 10,  0, 24, 43, 58,  1, 59, 57,  1, 49, 47, 50, 50,  1,\n        46, 47, 51,  6,  1, 39, 52, 42,  1, 61, 43,  5, 50, 50,  1, 46, 39, 60,\n        43,  1, 41, 53, 56, 52,  1, 39, 58,  1, 53, 59, 56,  1, 53, 61, 52,  1,\n        54, 56, 47, 41, 43,  8,  0, 21, 57,  5, 58,  1, 39,  1, 60, 43, 56, 42,\n        47, 41, 58, 12,  0,  0, 13, 50, 50, 10,  0, 26, 53,  1, 51, 53, 56, 43,\n         1, 58, 39, 50, 49, 47, 52, 45,  1, 53, 52,  5, 58, 11,  1, 50, 43, 58,\n         1, 47, 58,  1, 40, 43,  1, 42, 53, 52, 43, 10,  1, 39, 61, 39, 63,  6,\n         1, 39, 61, 39, 63,  2,  0,  0, 31, 43, 41, 53, 52, 42,  1, 15, 47, 58,\n        47, 64, 43, 52, 10,  0, 27, 52, 43,  1, 61, 53, 56, 42,  6,  1, 45, 53,\n        53, 42,  1, 41, 47, 58, 47, 64, 43, 52, 57,  8,  0,  0, 18, 47, 56, 57,\n        58,  1, 15, 47, 58, 47, 64, 43, 52, 10,  0, 35, 43,  1, 39, 56, 43,  1,\n        39, 41, 41, 53, 59, 52, 58, 43, 42,  1, 54, 53, 53, 56,  1, 41, 47, 58,\n        47, 64, 43, 52, 57,  6,  1, 58, 46, 43,  1, 54, 39, 58, 56, 47, 41, 47,\n        39, 52, 57,  1, 45, 53, 53, 42,  8,  0, 35, 46, 39, 58,  1, 39, 59, 58,\n        46, 53, 56, 47, 58, 63,  1, 57, 59, 56, 44, 43, 47, 58, 57,  1, 53, 52,\n         1, 61, 53, 59, 50, 42,  1, 56, 43, 50, 47, 43, 60, 43,  1, 59, 57, 10,\n         1, 47, 44,  1, 58, 46, 43, 63,  0, 61, 53, 59, 50, 42,  1, 63, 47, 43,\n        50, 42,  1, 59, 57,  1, 40, 59, 58,  1, 58, 46, 43,  1, 57, 59, 54, 43,\n        56, 44, 50, 59, 47, 58, 63,  6,  1, 61, 46, 47, 50, 43,  1, 47, 58,  1,\n        61, 43, 56, 43,  0, 61, 46, 53, 50, 43, 57, 53, 51, 43,  6,  1, 61, 43,\n         1, 51, 47, 45, 46, 58,  1, 45, 59, 43, 57, 57,  1, 58, 46, 43, 63,  1,\n        56, 43, 50, 47, 43, 60, 43, 42,  1, 59, 57,  1, 46, 59, 51, 39, 52, 43,\n        50, 63, 11,  0, 40, 59, 58,  1, 58, 46, 43, 63,  1, 58, 46, 47, 52, 49,\n         1, 61, 43,  1, 39, 56, 43,  1, 58, 53, 53,  1, 42, 43, 39, 56, 10,  1,\n        58, 46, 43,  1, 50, 43, 39, 52, 52, 43, 57, 57,  1, 58, 46, 39, 58,  0,\n        39, 44, 44, 50, 47, 41, 58, 57,  1, 59, 57,  6,  1, 58, 46, 43,  1, 53,\n        40, 48, 43, 41, 58,  1, 53, 44,  1, 53, 59, 56,  1, 51, 47, 57, 43, 56,\n        63,  6,  1, 47, 57,  1, 39, 57,  1, 39, 52,  0, 47, 52, 60, 43, 52, 58,\n        53, 56, 63,  1, 58, 53,  1, 54, 39, 56, 58, 47, 41, 59, 50, 39, 56, 47,\n        57, 43,  1, 58, 46, 43, 47, 56,  1, 39, 40, 59, 52, 42, 39, 52, 41, 43,\n        11,  1, 53, 59, 56,  0, 57, 59, 44, 44, 43, 56, 39, 52, 41, 43,  1, 47,\n        57,  1, 39,  1, 45, 39, 47, 52,  1, 58, 53,  1, 58, 46, 43, 51,  1, 24,\n        43, 58,  1, 59, 57,  1, 56, 43, 60, 43, 52, 45, 43,  1, 58, 46, 47, 57,\n         1, 61, 47, 58, 46,  0, 53, 59, 56,  1, 54, 47, 49, 43, 57,  6,  1, 43,\n        56, 43,  1, 61, 43,  1, 40, 43, 41, 53, 51, 43,  1, 56, 39, 49, 43, 57,\n        10,  1, 44, 53, 56,  1, 58, 46, 43,  1, 45, 53, 42, 57,  1, 49, 52, 53,\n        61,  1, 21,  0, 57, 54, 43, 39, 49,  1, 58, 46, 47, 57,  1, 47, 52,  1,\n        46, 59, 52, 45, 43, 56,  1, 44, 53, 56,  1, 40, 56, 43, 39, 42,  6,  1,\n        52, 53, 58,  1, 47, 52,  1, 58, 46, 47, 56, 57, 58,  1, 44, 53, 56,  1,\n        56, 43, 60, 43, 52, 45, 43,  8,  0,  0])\n","output_type":"stream"}]},{"cell_type":"code","source":"# Let's now split up the data into train and validation sets\nn = int(0.9*len(data)) # first 90% will be train, rest val\ntrain_data = data[:n]\nval_data = data[n:]","metadata":{"execution":{"iopub.status.busy":"2024-07-29T14:59:52.674871Z","iopub.execute_input":"2024-07-29T14:59:52.675380Z","iopub.status.idle":"2024-07-29T14:59:52.681620Z","shell.execute_reply.started":"2024-07-29T14:59:52.675344Z","shell.execute_reply":"2024-07-29T14:59:52.680337Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"block_size = 8\ntrain_data[:block_size+1]","metadata":{"execution":{"iopub.status.busy":"2024-07-29T14:59:52.683352Z","iopub.execute_input":"2024-07-29T14:59:52.683828Z","iopub.status.idle":"2024-07-29T14:59:52.704172Z","shell.execute_reply.started":"2024-07-29T14:59:52.683795Z","shell.execute_reply":"2024-07-29T14:59:52.702850Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"tensor([18, 47, 56, 57, 58,  1, 15, 47, 58])"},"metadata":{}}]},{"cell_type":"code","source":"x = train_data[:block_size]\ny = train_data[1:block_size+1]\nfor t in range(block_size):\n    context = x[:t+1]\n    target = y[t]\n    print(f\"when input is {context} the target: {target}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-29T14:59:52.707007Z","iopub.execute_input":"2024-07-29T14:59:52.707887Z","iopub.status.idle":"2024-07-29T14:59:52.719057Z","shell.execute_reply.started":"2024-07-29T14:59:52.707851Z","shell.execute_reply":"2024-07-29T14:59:52.717730Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"when input is tensor([18]) the target: 47\nwhen input is tensor([18, 47]) the target: 56\nwhen input is tensor([18, 47, 56]) the target: 57\nwhen input is tensor([18, 47, 56, 57]) the target: 58\nwhen input is tensor([18, 47, 56, 57, 58]) the target: 1\nwhen input is tensor([18, 47, 56, 57, 58,  1]) the target: 15\nwhen input is tensor([18, 47, 56, 57, 58,  1, 15]) the target: 47\nwhen input is tensor([18, 47, 56, 57, 58,  1, 15, 47]) the target: 58\n","output_type":"stream"}]},{"cell_type":"code","source":"torch.manual_seed(1337)\nbatch_size = 4 # how many independent sequences will we process in parallel?\nblock_size = 8 # what is the maximum context length for predictions?\n\ndef get_batch(split):\n    # generate a small batch of data of inputs x and targets y\n    data = train_data if split == 'train' else val_data\n    ix = torch.randint(len(data) - block_size, (batch_size,))\n    x = torch.stack([data[i:i+block_size] for i in ix])\n    y = torch.stack([data[i+1:i+block_size+1] for i in ix])\n    return x, y\n\nxb, yb = get_batch('train')\nprint('inputs:')\nprint(xb.shape)\nprint(xb)\nprint('targets:')\nprint(yb.shape)\nprint(yb)\n\nprint('----')\n\nfor b in range(batch_size): # batch dimension\n    for t in range(block_size): # time dimension\n        context = xb[b, :t+1]\n        target = yb[b,t]\n        print(f\"when input is: `{decode(context.tolist())}` | the target: `{decode([target.item()])}`\")","metadata":{"execution":{"iopub.status.busy":"2024-07-29T14:59:52.720746Z","iopub.execute_input":"2024-07-29T14:59:52.721235Z","iopub.status.idle":"2024-07-29T14:59:52.767926Z","shell.execute_reply.started":"2024-07-29T14:59:52.721194Z","shell.execute_reply":"2024-07-29T14:59:52.766533Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"inputs:\ntorch.Size([4, 8])\ntensor([[24, 43, 58,  5, 57,  1, 46, 43],\n        [44, 53, 56,  1, 58, 46, 39, 58],\n        [52, 58,  1, 58, 46, 39, 58,  1],\n        [25, 17, 27, 10,  0, 21,  1, 54]])\ntargets:\ntorch.Size([4, 8])\ntensor([[43, 58,  5, 57,  1, 46, 43, 39],\n        [53, 56,  1, 58, 46, 39, 58,  1],\n        [58,  1, 58, 46, 39, 58,  1, 46],\n        [17, 27, 10,  0, 21,  1, 54, 39]])\n----\nwhen input is: `L` | the target: `e`\nwhen input is: `Le` | the target: `t`\nwhen input is: `Let` | the target: `'`\nwhen input is: `Let'` | the target: `s`\nwhen input is: `Let's` | the target: ` `\nwhen input is: `Let's ` | the target: `h`\nwhen input is: `Let's h` | the target: `e`\nwhen input is: `Let's he` | the target: `a`\nwhen input is: `f` | the target: `o`\nwhen input is: `fo` | the target: `r`\nwhen input is: `for` | the target: ` `\nwhen input is: `for ` | the target: `t`\nwhen input is: `for t` | the target: `h`\nwhen input is: `for th` | the target: `a`\nwhen input is: `for tha` | the target: `t`\nwhen input is: `for that` | the target: ` `\nwhen input is: `n` | the target: `t`\nwhen input is: `nt` | the target: ` `\nwhen input is: `nt ` | the target: `t`\nwhen input is: `nt t` | the target: `h`\nwhen input is: `nt th` | the target: `a`\nwhen input is: `nt tha` | the target: `t`\nwhen input is: `nt that` | the target: ` `\nwhen input is: `nt that ` | the target: `h`\nwhen input is: `M` | the target: `E`\nwhen input is: `ME` | the target: `O`\nwhen input is: `MEO` | the target: `:`\nwhen input is: `MEO:` | the target: `\n`\nwhen input is: `MEO:\n` | the target: `I`\nwhen input is: `MEO:\nI` | the target: ` `\nwhen input is: `MEO:\nI ` | the target: `p`\nwhen input is: `MEO:\nI p` | the target: `a`\n","output_type":"stream"}]},{"cell_type":"code","source":"torch.manual_seed(1337)\nbatch_size = 4 # how many independent sequences will we process in parallel?\nblock_size = 8 # what is the maximum context length for predictions?\n\ndef get_batch(split):\n    # generate a small batch of data of inputs x and targets y\n    data = train_data if split == 'train' else val_data\n    ix = torch.randint(len(data) - block_size, (batch_size,))\n    x = torch.stack([data[i:i+block_size] for i in ix])\n    y = torch.stack([data[i+1:i+block_size+1] for i in ix])\n    return x, y\n\nxb, yb = get_batch('train')\nprint('inputs:')\nprint(xb.shape)\nprint(xb)\nprint('targets:')\nprint(yb.shape)\nprint(yb)\n\nprint('----')\n\nfor b in range(batch_size): # batch dimension\n    for t in range(block_size): # time dimension\n        context = xb[b, :t+1]\n        target = yb[b,t]\n        print(f\"when input is {context.tolist()} the target: {target}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-29T14:59:52.769411Z","iopub.execute_input":"2024-07-29T14:59:52.769871Z","iopub.status.idle":"2024-07-29T14:59:52.785293Z","shell.execute_reply.started":"2024-07-29T14:59:52.769838Z","shell.execute_reply":"2024-07-29T14:59:52.783931Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"inputs:\ntorch.Size([4, 8])\ntensor([[24, 43, 58,  5, 57,  1, 46, 43],\n        [44, 53, 56,  1, 58, 46, 39, 58],\n        [52, 58,  1, 58, 46, 39, 58,  1],\n        [25, 17, 27, 10,  0, 21,  1, 54]])\ntargets:\ntorch.Size([4, 8])\ntensor([[43, 58,  5, 57,  1, 46, 43, 39],\n        [53, 56,  1, 58, 46, 39, 58,  1],\n        [58,  1, 58, 46, 39, 58,  1, 46],\n        [17, 27, 10,  0, 21,  1, 54, 39]])\n----\nwhen input is [24] the target: 43\nwhen input is [24, 43] the target: 58\nwhen input is [24, 43, 58] the target: 5\nwhen input is [24, 43, 58, 5] the target: 57\nwhen input is [24, 43, 58, 5, 57] the target: 1\nwhen input is [24, 43, 58, 5, 57, 1] the target: 46\nwhen input is [24, 43, 58, 5, 57, 1, 46] the target: 43\nwhen input is [24, 43, 58, 5, 57, 1, 46, 43] the target: 39\nwhen input is [44] the target: 53\nwhen input is [44, 53] the target: 56\nwhen input is [44, 53, 56] the target: 1\nwhen input is [44, 53, 56, 1] the target: 58\nwhen input is [44, 53, 56, 1, 58] the target: 46\nwhen input is [44, 53, 56, 1, 58, 46] the target: 39\nwhen input is [44, 53, 56, 1, 58, 46, 39] the target: 58\nwhen input is [44, 53, 56, 1, 58, 46, 39, 58] the target: 1\nwhen input is [52] the target: 58\nwhen input is [52, 58] the target: 1\nwhen input is [52, 58, 1] the target: 58\nwhen input is [52, 58, 1, 58] the target: 46\nwhen input is [52, 58, 1, 58, 46] the target: 39\nwhen input is [52, 58, 1, 58, 46, 39] the target: 58\nwhen input is [52, 58, 1, 58, 46, 39, 58] the target: 1\nwhen input is [52, 58, 1, 58, 46, 39, 58, 1] the target: 46\nwhen input is [25] the target: 17\nwhen input is [25, 17] the target: 27\nwhen input is [25, 17, 27] the target: 10\nwhen input is [25, 17, 27, 10] the target: 0\nwhen input is [25, 17, 27, 10, 0] the target: 21\nwhen input is [25, 17, 27, 10, 0, 21] the target: 1\nwhen input is [25, 17, 27, 10, 0, 21, 1] the target: 54\nwhen input is [25, 17, 27, 10, 0, 21, 1, 54] the target: 39\n","output_type":"stream"}]},{"cell_type":"code","source":"print(xb) # our input to the transformer","metadata":{"execution":{"iopub.status.busy":"2024-07-29T14:59:52.786765Z","iopub.execute_input":"2024-07-29T14:59:52.787112Z","iopub.status.idle":"2024-07-29T14:59:52.796180Z","shell.execute_reply.started":"2024-07-29T14:59:52.787080Z","shell.execute_reply":"2024-07-29T14:59:52.794825Z"},"trusted":true},"execution_count":19,"outputs":[{"name":"stdout","text":"tensor([[24, 43, 58,  5, 57,  1, 46, 43],\n        [44, 53, 56,  1, 58, 46, 39, 58],\n        [52, 58,  1, 58, 46, 39, 58,  1],\n        [25, 17, 27, 10,  0, 21,  1, 54]])\n","output_type":"stream"}]},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nfrom torch.nn import functional as F\ntorch.manual_seed(1337)\n\nclass BigramLanguageModel(nn.Module):\n\n    def __init__(self, vocab_size):\n        super().__init__()\n        # each token directly reads off the logits for the next token from a lookup table\n        self.token_embedding_table = nn.Embedding(vocab_size, vocab_size)\n\n    def forward(self, idx, targets=None):\n\n        # idx and targets are both (B,T) tensor of integers\n        logits = self.token_embedding_table(idx) # (B,T,C) # Batch = 4,Time = 8, and Channel = vocab_size\n\n        if targets is None:\n            loss = None\n        else:\n            B, T, C = logits.shape\n            logits = logits.view(B*T, C) # reshaping to match Pytorch expectation for F.cross_entropy\n            targets = targets.view(B*T)\n            loss = F.cross_entropy(logits, targets)\n\n        return logits, loss\n\n    def generate(self, idx, max_new_tokens):\n        # idx is (B, T) array of indices in the current context\n        for _ in range(max_new_tokens):\n            # get the predictions\n            logits, loss = self(idx)\n            # focus only on the last time step\n            logits = logits[:, -1, :] # becomes (B, C)\n            # apply softmax to get probabilities\n            probs = F.softmax(logits, dim=-1) # (B, C)\n            # sample from the distribution\n            idx_next = torch.multinomial(probs, num_samples=1) # (B, 1)\n            # append sampled index to the running sequence\n            idx = torch.cat((idx, idx_next), dim=1) # (B, T+1)\n        return idx\n\nm = BigramLanguageModel(vocab_size)\nlogits, loss = m(xb, yb)\nprint(logits.shape)\nprint(loss)\n\nprint(decode(m.generate(idx = torch.zeros((1, 1), dtype=torch.long), max_new_tokens=100)[0].tolist()))","metadata":{"execution":{"iopub.status.busy":"2024-07-29T14:59:52.797865Z","iopub.execute_input":"2024-07-29T14:59:52.798325Z","iopub.status.idle":"2024-07-29T14:59:52.916342Z","shell.execute_reply.started":"2024-07-29T14:59:52.798283Z","shell.execute_reply":"2024-07-29T14:59:52.915019Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stdout","text":"torch.Size([32, 65])\ntensor(4.8786, grad_fn=<NllLossBackward0>)\n\nSr?qP-QWktXoL&jLDJgOLVz'RIoDqHdhsV&vLLxatjscMpwLERSPyao.qfzs$Ys$zF-w,;eEkzxjgCKFChs!iWW.ObzDnxA Ms$3\n","output_type":"stream"}]},{"cell_type":"code","source":"# Expected loss for the vocab size\n-torch.tensor(1/65).log()","metadata":{"execution":{"iopub.status.busy":"2024-07-29T14:59:52.917487Z","iopub.execute_input":"2024-07-29T14:59:52.917863Z","iopub.status.idle":"2024-07-29T14:59:52.928961Z","shell.execute_reply.started":"2024-07-29T14:59:52.917832Z","shell.execute_reply":"2024-07-29T14:59:52.927431Z"},"trusted":true},"execution_count":21,"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"tensor(4.1744)"},"metadata":{}}]},{"cell_type":"markdown","source":"Initialization is not evenly distributed ","metadata":{}},{"cell_type":"code","source":"# create a PyTorch optimizer\noptimizer = torch.optim.AdamW(m.parameters(), lr=1e-3)","metadata":{"execution":{"iopub.status.busy":"2024-07-29T14:59:53.332137Z","iopub.execute_input":"2024-07-29T14:59:53.332629Z","iopub.status.idle":"2024-07-29T14:59:54.936898Z","shell.execute_reply.started":"2024-07-29T14:59:53.332589Z","shell.execute_reply":"2024-07-29T14:59:54.935242Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"batch_size = 32\nfor steps in tqdm(range(10000)): # increase number of steps for good results...\n\n    # sample a batch of data\n    xb, yb = get_batch('train')\n\n    # evaluate the loss\n    logits, loss = m(xb, yb)\n    optimizer.zero_grad(set_to_none=True)\n    loss.backward()\n    optimizer.step()\n\nprint(loss.item())","metadata":{"execution":{"iopub.status.busy":"2024-07-29T14:59:54.939323Z","iopub.execute_input":"2024-07-29T14:59:54.939879Z","iopub.status.idle":"2024-07-29T15:00:15.763817Z","shell.execute_reply.started":"2024-07-29T14:59:54.939842Z","shell.execute_reply":"2024-07-29T15:00:15.762452Z"},"trusted":true},"execution_count":23,"outputs":[{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/10000 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d52252aaaf0c43bcb20936f9e6ed41f1"}},"metadata":{}},{"name":"stdout","text":"2.5727508068084717\n","output_type":"stream"}]},{"cell_type":"code","source":"print(decode(m.generate(idx = torch.zeros((1, 1), dtype=torch.long), max_new_tokens=500)[0].tolist()))","metadata":{"execution":{"iopub.status.busy":"2024-07-29T15:00:15.765356Z","iopub.execute_input":"2024-07-29T15:00:15.765777Z","iopub.status.idle":"2024-07-29T15:00:15.843167Z","shell.execute_reply.started":"2024-07-29T15:00:15.765746Z","shell.execute_reply":"2024-07-29T15:00:15.842052Z"},"trusted":true},"execution_count":24,"outputs":[{"name":"stdout","text":"\nIyoteng h hasbe pave pirance\nRie hicomyonthar's\nPlinseard ith henoure wounonthioneir thondy, y heltieiengerofo'dsssit ey\nKIN d pe wither vouprrouthercc.\nhathe; d!\nMy hind tt hinig t ouchos tes; st yo hind wotte grotonear 'so it t jod weancotha:\nh hay.JUCle n prids, r loncave w hollular s O:\nHIs; ht anjx?\n\nDUThinqunt.\n\nLaZAnde.\nathave l.\nKEONH:\nARThanco be y,-hedarwnoddy scace, tridesar, wnl'shenous s ls, theresseys\nPlorseelapinghiybHen yof GLUCEN t l-t E:\nI hisgothers je are!-e!\nQLYotouciullle'z\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## The Mathematical trick in Self-attention","metadata":{}},{"cell_type":"code","source":"# toy example illustrating how matrix multiplication can be used for a \"weighted aggregation\"\ntorch.manual_seed(42)\na = torch.tril(torch.ones(3, 3))\na = a / torch.sum(a, 1, keepdim=True)\nb = torch.randint(0,10,(3,2)).float()\nc = a @ b\nprint('a=')\nprint(a)\nprint('--')\nprint('b=')\nprint(b)\nprint('--')\nprint('c=')\nprint(c)","metadata":{"execution":{"iopub.status.busy":"2024-07-29T15:00:15.846163Z","iopub.execute_input":"2024-07-29T15:00:15.846606Z","iopub.status.idle":"2024-07-29T15:00:15.870778Z","shell.execute_reply.started":"2024-07-29T15:00:15.846572Z","shell.execute_reply":"2024-07-29T15:00:15.869460Z"},"trusted":true},"execution_count":25,"outputs":[{"name":"stdout","text":"a=\ntensor([[1.0000, 0.0000, 0.0000],\n        [0.5000, 0.5000, 0.0000],\n        [0.3333, 0.3333, 0.3333]])\n--\nb=\ntensor([[2., 7.],\n        [6., 4.],\n        [6., 5.]])\n--\nc=\ntensor([[2.0000, 7.0000],\n        [4.0000, 5.5000],\n        [4.6667, 5.3333]])\n","output_type":"stream"}]},{"cell_type":"code","source":"# consider the following toy example:\n\ntorch.manual_seed(1337)\nB,T,C = 4,8,2 # batch, time, channels\nx = torch.randn(B,T,C)\nx.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-29T15:00:15.872164Z","iopub.execute_input":"2024-07-29T15:00:15.872533Z","iopub.status.idle":"2024-07-29T15:00:15.883519Z","shell.execute_reply.started":"2024-07-29T15:00:15.872501Z","shell.execute_reply":"2024-07-29T15:00:15.882040Z"},"trusted":true},"execution_count":26,"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"torch.Size([4, 8, 2])"},"metadata":{}}]},{"cell_type":"code","source":"# We want x[b,t] = mean_{i<=t} x[b,i]\nxbow = torch.zeros((B,T,C))\nfor b in range(B):\n    for t in range(T):\n        xprev = x[b,:t+1] # (t,C)\n        xbow[b,t] = torch.mean(xprev, 0)","metadata":{"execution":{"iopub.status.busy":"2024-07-29T15:00:15.886730Z","iopub.execute_input":"2024-07-29T15:00:15.887159Z","iopub.status.idle":"2024-07-29T15:00:15.896452Z","shell.execute_reply.started":"2024-07-29T15:00:15.887127Z","shell.execute_reply":"2024-07-29T15:00:15.895121Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"code","source":"# version 2: using matrix multiply for a weighted aggregation\nwei = torch.tril(torch.ones(T, T))\nwei = wei / wei.sum(1, keepdim=True)\nxbow2 = wei @ x # (B, T, T) @ (B, T, C) ----> (B, T, C)\ntorch.allclose(xbow, xbow2)","metadata":{"execution":{"iopub.status.busy":"2024-07-29T15:00:15.898155Z","iopub.execute_input":"2024-07-29T15:00:15.898636Z","iopub.status.idle":"2024-07-29T15:00:15.912663Z","shell.execute_reply.started":"2024-07-29T15:00:15.898589Z","shell.execute_reply":"2024-07-29T15:00:15.911414Z"},"trusted":true},"execution_count":28,"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"False"},"metadata":{}}]},{"cell_type":"code","source":"# version 3: use Softmax\ntril = torch.tril(torch.ones(T, T))\nwei = torch.zeros((T,T))\nwei = wei.masked_fill(tril == 0, float('-inf'))\nwei = F.softmax(wei, dim=-1)\nxbow3 = wei @ x\ntorch.allclose(xbow, xbow3)","metadata":{"execution":{"iopub.status.busy":"2024-07-29T15:00:15.914225Z","iopub.execute_input":"2024-07-29T15:00:15.914907Z","iopub.status.idle":"2024-07-29T15:00:15.927306Z","shell.execute_reply.started":"2024-07-29T15:00:15.914873Z","shell.execute_reply":"2024-07-29T15:00:15.926008Z"},"trusted":true},"execution_count":29,"outputs":[{"execution_count":29,"output_type":"execute_result","data":{"text/plain":"False"},"metadata":{}}]},{"cell_type":"code","source":"# version 4: self-attention!\ntorch.manual_seed(1337)\nB,T,C = 4,8,32 # batch, time, channels\nx = torch.randn(B,T,C)\n\n# let's see a single Head perform self-attention\nhead_size = 16\nkey = nn.Linear(C, head_size, bias=False)\nquery = nn.Linear(C, head_size, bias=False)\nvalue = nn.Linear(C, head_size, bias=False)\nk = key(x)   # (B, T, head_size = 16)\nq = query(x) # (B, T, head_size = 16)\nwei =  q @ k.transpose(-2, -1) # (B, T, 16) @ (B, 16, T) ---> (B, T, T)\n\ntril = torch.tril(torch.ones(T, T))\n#wei = torch.zeros((T,T))\nwei = wei.masked_fill(tril == 0, float('-inf'))\nwei = F.softmax(wei, dim=-1)\n\nv = value(x)\nout = wei @ v\n#out = wei @ x\n\nout.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-29T15:00:15.929061Z","iopub.execute_input":"2024-07-29T15:00:15.929440Z","iopub.status.idle":"2024-07-29T15:00:15.948013Z","shell.execute_reply.started":"2024-07-29T15:00:15.929411Z","shell.execute_reply":"2024-07-29T15:00:15.946659Z"},"trusted":true},"execution_count":30,"outputs":[{"execution_count":30,"output_type":"execute_result","data":{"text/plain":"torch.Size([4, 8, 16])"},"metadata":{}}]},{"cell_type":"code","source":"wei[0]","metadata":{"execution":{"iopub.status.busy":"2024-07-29T15:00:15.951781Z","iopub.execute_input":"2024-07-29T15:00:15.952191Z","iopub.status.idle":"2024-07-29T15:00:15.963240Z","shell.execute_reply.started":"2024-07-29T15:00:15.952161Z","shell.execute_reply":"2024-07-29T15:00:15.962016Z"},"trusted":true},"execution_count":31,"outputs":[{"execution_count":31,"output_type":"execute_result","data":{"text/plain":"tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],\n        [0.1574, 0.8426, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],\n        [0.2088, 0.1646, 0.6266, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],\n        [0.5792, 0.1187, 0.1889, 0.1131, 0.0000, 0.0000, 0.0000, 0.0000],\n        [0.0294, 0.1052, 0.0469, 0.0276, 0.7909, 0.0000, 0.0000, 0.0000],\n        [0.0176, 0.2689, 0.0215, 0.0089, 0.6812, 0.0019, 0.0000, 0.0000],\n        [0.1691, 0.4066, 0.0438, 0.0416, 0.1048, 0.2012, 0.0329, 0.0000],\n        [0.0210, 0.0843, 0.0555, 0.2297, 0.0573, 0.0709, 0.2423, 0.2391]],\n       grad_fn=<SelectBackward0>)"},"metadata":{}}]},{"cell_type":"markdown","source":"Notes:\n- Attention is a **communication mechanism**. Can be seen as nodes in a directed graph looking at each other and aggregating information with a weighted sum from all nodes that point to them, with data-dependent weights.\n- There is no notion of space. Attention simply acts over a set of vectors. This is why we need to positionally encode tokens.\n- Each example across batch dimension is of course processed completely independently and never \"talk\" to each other\n- In an \"encoder\" attention block just delete the single line that does masking with `tril`, allowing all tokens to communicate. This block here is called a \"decoder\" attention block because it has triangular masking, and is usually used in autoregressive settings, like language modeling.\n- \"self-attention\" just means that the keys and values are produced from the same source as queries. In \"cross-attention\", the queries still get produced from x, but the keys and values come from some other, external source (e.g. an encoder module)\n- \"Scaled\" attention additional divides `wei` by 1/sqrt(head_size). This makes it so when input Q,K are unit variance, wei will be unit variance too and Softmax will stay diffuse and not saturate too much. Illustration below","metadata":{}},{"cell_type":"code","source":"k = torch.randn(B,T,head_size)\nq = torch.randn(B,T,head_size)\nwei = q @ k.transpose(-2, -1) * head_size**-0.5","metadata":{"execution":{"iopub.status.busy":"2024-07-29T15:00:15.964405Z","iopub.execute_input":"2024-07-29T15:00:15.964801Z","iopub.status.idle":"2024-07-29T15:00:15.972287Z","shell.execute_reply.started":"2024-07-29T15:00:15.964770Z","shell.execute_reply":"2024-07-29T15:00:15.971144Z"},"trusted":true},"execution_count":32,"outputs":[]},{"cell_type":"code","source":"k.var()","metadata":{"execution":{"iopub.status.busy":"2024-07-29T15:00:15.973898Z","iopub.execute_input":"2024-07-29T15:00:15.974329Z","iopub.status.idle":"2024-07-29T15:00:15.985899Z","shell.execute_reply.started":"2024-07-29T15:00:15.974287Z","shell.execute_reply":"2024-07-29T15:00:15.984706Z"},"trusted":true},"execution_count":33,"outputs":[{"execution_count":33,"output_type":"execute_result","data":{"text/plain":"tensor(1.0449)"},"metadata":{}}]},{"cell_type":"code","source":"q.var()","metadata":{"execution":{"iopub.status.busy":"2024-07-29T15:00:15.987063Z","iopub.execute_input":"2024-07-29T15:00:15.987439Z","iopub.status.idle":"2024-07-29T15:00:15.996958Z","shell.execute_reply.started":"2024-07-29T15:00:15.987410Z","shell.execute_reply":"2024-07-29T15:00:15.995584Z"},"trusted":true},"execution_count":34,"outputs":[{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"tensor(1.0700)"},"metadata":{}}]},{"cell_type":"code","source":"wei.var()","metadata":{"execution":{"iopub.status.busy":"2024-07-29T15:00:15.998605Z","iopub.execute_input":"2024-07-29T15:00:15.999825Z","iopub.status.idle":"2024-07-29T15:00:16.008252Z","shell.execute_reply.started":"2024-07-29T15:00:15.999782Z","shell.execute_reply":"2024-07-29T15:00:16.007089Z"},"trusted":true},"execution_count":35,"outputs":[{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"tensor(1.0918)"},"metadata":{}}]},{"cell_type":"code","source":"torch.softmax(torch.tensor([0.1, -0.2, 0.3, -0.2, 0.5]), dim=-1)","metadata":{"execution":{"iopub.status.busy":"2024-07-29T15:00:16.009775Z","iopub.execute_input":"2024-07-29T15:00:16.010139Z","iopub.status.idle":"2024-07-29T15:00:16.019205Z","shell.execute_reply.started":"2024-07-29T15:00:16.010109Z","shell.execute_reply":"2024-07-29T15:00:16.018067Z"},"trusted":true},"execution_count":36,"outputs":[{"execution_count":36,"output_type":"execute_result","data":{"text/plain":"tensor([0.1925, 0.1426, 0.2351, 0.1426, 0.2872])"},"metadata":{}}]},{"cell_type":"code","source":"torch.softmax(torch.tensor([0.1, -0.2, 0.3, -0.2, 0.5])*8, dim=-1) # gets too peaky, converges to one-hot","metadata":{"execution":{"iopub.status.busy":"2024-07-29T15:00:16.020440Z","iopub.execute_input":"2024-07-29T15:00:16.020835Z","iopub.status.idle":"2024-07-29T15:00:16.031298Z","shell.execute_reply.started":"2024-07-29T15:00:16.020793Z","shell.execute_reply":"2024-07-29T15:00:16.030097Z"},"trusted":true},"execution_count":37,"outputs":[{"execution_count":37,"output_type":"execute_result","data":{"text/plain":"tensor([0.0326, 0.0030, 0.1615, 0.0030, 0.8000])"},"metadata":{}}]},{"cell_type":"code","source":"class LayerNorm1d: # (used to be BatchNorm1d)\n\n    def __init__(self, dim, eps=1e-5, momentum=0.1):\n        self.eps = eps\n        self.gamma = torch.ones(dim)\n        self.beta = torch.zeros(dim)\n\n    def __call__(self, x):\n        # calculate the forward pass\n        xmean = x.mean(1, keepdim=True) # batch mean\n        xvar = x.var(1, keepdim=True) # batch variance\n        xhat = (x - xmean) / torch.sqrt(xvar + self.eps) # normalize to unit variance\n        self.out = self.gamma * xhat + self.beta\n        return self.out\n\n    def parameters(self):\n        return [self.gamma, self.beta]\n\ntorch.manual_seed(1337)\nmodule = LayerNorm1d(100)\nx = torch.randn(32, 100) # batch size 32 of 100-dimensional vectors\nx = module(x)\nx.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-29T15:00:16.032915Z","iopub.execute_input":"2024-07-29T15:00:16.033323Z","iopub.status.idle":"2024-07-29T15:00:16.050561Z","shell.execute_reply.started":"2024-07-29T15:00:16.033292Z","shell.execute_reply":"2024-07-29T15:00:16.049266Z"},"trusted":true},"execution_count":38,"outputs":[{"execution_count":38,"output_type":"execute_result","data":{"text/plain":"torch.Size([32, 100])"},"metadata":{}}]},{"cell_type":"code","source":"x[:,0].mean(), x[:,0].std() # mean,std of one feature across all batch inputs","metadata":{"execution":{"iopub.status.busy":"2024-07-29T15:01:37.955068Z","iopub.execute_input":"2024-07-29T15:01:37.955537Z","iopub.status.idle":"2024-07-29T15:01:37.966992Z","shell.execute_reply.started":"2024-07-29T15:01:37.955502Z","shell.execute_reply":"2024-07-29T15:01:37.965450Z"},"trusted":true},"execution_count":39,"outputs":[{"execution_count":39,"output_type":"execute_result","data":{"text/plain":"(tensor(0.1469), tensor(0.8803))"},"metadata":{}}]},{"cell_type":"code","source":"x[0,:].mean(), x[0,:].std() # mean,std of a single input from the batch, of its features","metadata":{"execution":{"iopub.status.busy":"2024-07-29T15:01:38.652662Z","iopub.execute_input":"2024-07-29T15:01:38.653791Z","iopub.status.idle":"2024-07-29T15:01:38.662934Z","shell.execute_reply.started":"2024-07-29T15:01:38.653747Z","shell.execute_reply":"2024-07-29T15:01:38.661606Z"},"trusted":true},"execution_count":40,"outputs":[{"execution_count":40,"output_type":"execute_result","data":{"text/plain":"(tensor(-9.5367e-09), tensor(1.0000))"},"metadata":{}}]},{"cell_type":"markdown","source":"### Full code","metadata":{}},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nfrom torch.nn import functional as F\n\n# hyperparameters\nbatch_size = 16 # how many independent sequences will we process in parallel?\nblock_size = 32 # what is the maximum context length for predictions?\nmax_iters = 5000\neval_interval = 100\nlearning_rate = 1e-3\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\neval_iters = 200\nn_embd = 64\nn_head = 4\nn_layer = 4\ndropout = 0.0\n# ------------\n\ntorch.manual_seed(1337)\n\n# wget https://raw.githubusercontent.com/karpathy/char-rnn/master/data/tinyshakespeare/input.txt\nwith open('input.txt', 'r', encoding='utf-8') as f:\n    text = f.read()\n\n# here are all the unique characters that occur in this text\nchars = sorted(list(set(text)))\nvocab_size = len(chars)\n# create a mapping from characters to integers\nstoi = { ch:i for i,ch in enumerate(chars) }\nitos = { i:ch for i,ch in enumerate(chars) }\nencode = lambda s: [stoi[c] for c in s] # encoder: take a string, output a list of integers\ndecode = lambda l: ''.join([itos[i] for i in l]) # decoder: take a list of integers, output a string\n\n# Train and test splits\ndata = torch.tensor(encode(text), dtype=torch.long)\nn = int(0.9*len(data)) # first 90% will be train, rest val\ntrain_data = data[:n]\nval_data = data[n:]\n\n# data loading\ndef get_batch(split):\n    # generate a small batch of data of inputs x and targets y\n    data = train_data if split == 'train' else val_data\n    ix = torch.randint(len(data) - block_size, (batch_size,))\n    x = torch.stack([data[i:i+block_size] for i in ix])\n    y = torch.stack([data[i+1:i+block_size+1] for i in ix])\n    x, y = x.to(device), y.to(device)\n    return x, y\n\n@torch.no_grad()\ndef estimate_loss():\n    out = {}\n    model.eval()\n    for split in ['train', 'val']:\n        losses = torch.zeros(eval_iters)\n        for k in range(eval_iters):\n            X, Y = get_batch(split)\n            logits, loss = model(X, Y)\n            losses[k] = loss.item()\n        out[split] = losses.mean()\n    model.train()\n    return out\n\nclass Head(nn.Module):\n    \"\"\" one head of self-attention \"\"\"\n\n    def __init__(self, head_size):\n        super().__init__()\n        self.key = nn.Linear(n_embd, head_size, bias=False)\n        self.query = nn.Linear(n_embd, head_size, bias=False)\n        self.value = nn.Linear(n_embd, head_size, bias=False)\n        self.register_buffer('tril', torch.tril(torch.ones(block_size, block_size)))\n\n        self.dropout = nn.Dropout(dropout)\n\n    def forward(self, x):\n        B,T,C = x.shape\n        k = self.key(x)   # (B,T,C)\n        q = self.query(x) # (B,T,C)\n        # compute attention scores (\"affinities\")\n        wei = q @ k.transpose(-2,-1) * C**-0.5 # (B, T, C) @ (B, C, T) -> (B, T, T)\n        wei = wei.masked_fill(self.tril[:T, :T] == 0, float('-inf')) # (B, T, T)\n        wei = F.softmax(wei, dim=-1) # (B, T, T)\n        wei = self.dropout(wei)\n        # perform the weighted aggregation of the values\n        v = self.value(x) # (B,T,C)\n        out = wei @ v # (B, T, T) @ (B, T, C) -> (B, T, C)\n        return out\n\nclass MultiHeadAttention(nn.Module):\n    \"\"\" multiple heads of self-attention in parallel \"\"\"\n\n    def __init__(self, num_heads, head_size):\n        super().__init__()\n        self.heads = nn.ModuleList([Head(head_size) for _ in range(num_heads)])\n        self.proj = nn.Linear(n_embd, n_embd)\n        self.dropout = nn.Dropout(dropout)\n\n    def forward(self, x):\n        out = torch.cat([h(x) for h in self.heads], dim=-1)\n        out = self.dropout(self.proj(out))\n        return out\n\nclass FeedFoward(nn.Module):\n    \"\"\" a simple linear layer followed by a non-linearity \"\"\"\n\n    def __init__(self, n_embd):\n        super().__init__()\n        self.net = nn.Sequential(\n            nn.Linear(n_embd, 4 * n_embd),\n            nn.ReLU(),\n            nn.Linear(4 * n_embd, n_embd),\n            nn.Dropout(dropout),\n        )\n\n    def forward(self, x):\n        return self.net(x)\n\nclass Block(nn.Module):\n    \"\"\" Transformer block: communication followed by computation \"\"\"\n\n    def __init__(self, n_embd, n_head):\n        # n_embd: embedding dimension, n_head: the number of heads we'd like\n        super().__init__()\n        head_size = n_embd // n_head\n        self.sa = MultiHeadAttention(n_head, head_size)\n        self.ffwd = FeedFoward(n_embd)\n        self.ln1 = nn.LayerNorm(n_embd)\n        self.ln2 = nn.LayerNorm(n_embd)\n\n    def forward(self, x):\n        x = x + self.sa(self.ln1(x))\n        x = x + self.ffwd(self.ln2(x))\n        return x\n\n# super simple bigram model\nclass BigramLanguageModel(nn.Module):\n\n    def __init__(self):\n        super().__init__()\n        # each token directly reads off the logits for the next token from a lookup table\n        self.token_embedding_table = nn.Embedding(vocab_size, n_embd)\n        self.position_embedding_table = nn.Embedding(block_size, n_embd)\n        self.blocks = nn.Sequential(*[Block(n_embd, n_head=n_head) for _ in range(n_layer)])\n        self.ln_f = nn.LayerNorm(n_embd) # final layer norm\n        self.lm_head = nn.Linear(n_embd, vocab_size)\n\n    def forward(self, idx, targets=None):\n        B, T = idx.shape\n\n        # idx and targets are both (B,T) tensor of integers\n        tok_emb = self.token_embedding_table(idx) # (B,T,C)\n        pos_emb = self.position_embedding_table(torch.arange(T, device=device)) # (T,C)\n        x = tok_emb + pos_emb # (B,T,C)\n        x = self.blocks(x) # (B,T,C)\n        x = self.ln_f(x) # (B,T,C)\n        logits = self.lm_head(x) # (B,T,vocab_size)\n\n        if targets is None:\n            loss = None\n        else:\n            B, T, C = logits.shape\n            logits = logits.view(B*T, C)\n            targets = targets.view(B*T)\n            loss = F.cross_entropy(logits, targets)\n\n        return logits, loss\n\n    def generate(self, idx, max_new_tokens):\n        # idx is (B, T) array of indices in the current context\n        for _ in range(max_new_tokens):\n            # crop idx to the last block_size tokens\n            idx_cond = idx[:, -block_size:]\n            # get the predictions\n            logits, loss = self(idx_cond)\n            # focus only on the last time step\n            logits = logits[:, -1, :] # becomes (B, C)\n            # apply softmax to get probabilities\n            probs = F.softmax(logits, dim=-1) # (B, C)\n            # sample from the distribution\n            idx_next = torch.multinomial(probs, num_samples=1) # (B, 1)\n            # append sampled index to the running sequence\n            idx = torch.cat((idx, idx_next), dim=1) # (B, T+1)\n        return idx\n\nmodel = BigramLanguageModel()\nm = model.to(device)\n# print the number of parameters in the model\nprint(sum(p.numel() for p in m.parameters())/1e6, 'M parameters')\n\n# create a PyTorch optimizer\noptimizer = torch.optim.AdamW(model.parameters(), lr=learning_rate)\n\nfor iter in tqdm(range(max_iters)):\n\n    # every once in a while evaluate the loss on train and val sets\n    if iter % eval_interval == 0 or iter == max_iters - 1:\n        losses = estimate_loss()\n        print(f\"step {iter}: train loss {losses['train']:.4f}, val loss {losses['val']:.4f}\")\n\n    # sample a batch of data\n    xb, yb = get_batch('train')\n\n    # evaluate the loss\n    logits, loss = model(xb, yb)\n    optimizer.zero_grad(set_to_none=True)\n    loss.backward()\n    optimizer.step()\n\n# generate from the model\ncontext = torch.zeros((1, 1), dtype=torch.long, device=device)\nprint(decode(m.generate(context, max_new_tokens=2000)[0].tolist()))","metadata":{"execution":{"iopub.status.busy":"2024-07-29T15:01:40.001682Z","iopub.execute_input":"2024-07-29T15:01:40.002110Z","iopub.status.idle":"2024-07-29T15:09:05.900677Z","shell.execute_reply.started":"2024-07-29T15:01:40.002078Z","shell.execute_reply":"2024-07-29T15:09:05.899077Z"},"trusted":true},"execution_count":41,"outputs":[{"name":"stdout","text":"0.209729 M parameters\nstep 0: train loss 4.4116, val loss 4.4022\nstep 100: train loss 2.6568, val loss 2.6670\nstep 200: train loss 2.5091, val loss 2.5060\nstep 300: train loss 2.4196, val loss 2.4337\nstep 400: train loss 2.3505, val loss 2.3568\nstep 500: train loss 2.2962, val loss 2.3127\nstep 600: train loss 2.2408, val loss 2.2498\nstep 700: train loss 2.2053, val loss 2.2192\nstep 800: train loss 2.1637, val loss 2.1868\nstep 900: train loss 2.1237, val loss 2.1501\nstep 1000: train loss 2.1022, val loss 2.1295\nstep 1100: train loss 2.0686, val loss 2.1175\nstep 1200: train loss 2.0380, val loss 2.0795\nstep 1300: train loss 2.0239, val loss 2.0635\nstep 1400: train loss 1.9908, val loss 2.0350\nstep 1500: train loss 1.9703, val loss 2.0310\nstep 1600: train loss 1.9613, val loss 2.0473\nstep 1700: train loss 1.9428, val loss 2.0159\nstep 1800: train loss 1.9069, val loss 1.9935\nstep 1900: train loss 1.9084, val loss 1.9899\nstep 2000: train loss 1.8856, val loss 1.9969\nstep 2100: train loss 1.8726, val loss 1.9760\nstep 2200: train loss 1.8613, val loss 1.9629\nstep 2300: train loss 1.8554, val loss 1.9501\nstep 2400: train loss 1.8418, val loss 1.9432\nstep 2500: train loss 1.8165, val loss 1.9446\nstep 2600: train loss 1.8276, val loss 1.9393\nstep 2700: train loss 1.8107, val loss 1.9328\nstep 2800: train loss 1.8024, val loss 1.9223\nstep 2900: train loss 1.8017, val loss 1.9300\nstep 3000: train loss 1.7961, val loss 1.9222\nstep 3100: train loss 1.7699, val loss 1.9195\nstep 3200: train loss 1.7555, val loss 1.9142\nstep 3300: train loss 1.7567, val loss 1.9075\nstep 3400: train loss 1.7535, val loss 1.8967\nstep 3500: train loss 1.7372, val loss 1.8952\nstep 3600: train loss 1.7239, val loss 1.8880\nstep 3700: train loss 1.7284, val loss 1.8802\nstep 3800: train loss 1.7218, val loss 1.8905\nstep 3900: train loss 1.7203, val loss 1.8775\nstep 4000: train loss 1.7114, val loss 1.8584\nstep 4100: train loss 1.7127, val loss 1.8788\nstep 4200: train loss 1.7053, val loss 1.8599\nstep 4300: train loss 1.6988, val loss 1.8442\nstep 4400: train loss 1.7023, val loss 1.8582\nstep 4500: train loss 1.6878, val loss 1.8434\nstep 4600: train loss 1.6864, val loss 1.8335\nstep 4700: train loss 1.6823, val loss 1.8425\nstep 4800: train loss 1.6638, val loss 1.8421\nstep 4900: train loss 1.6714, val loss 1.8387\nstep 4999: train loss 1.6642, val loss 1.8201\n\nROMEO:\nBut you froth, bloody,\nWhIV: it they to duke I usless like,\nUnners where's grande we\nO! savied to thy! but too your not ond, litgle.\n\nANTANUS:\nHall rews you\nThan pranty her Huthming:\nHis by betters thom tow, good it not?\nDo marres shall; there some not.\n\nLUCIO:\nLord,----\nBut thou sging them this my frecepensed:\nBy thou sovore.\n\nISABELLA:\nHis pittate but grove to him, he's subderen,\nThat was me take breathing was naye to all,\nWhose eneman the comfed is the life strave wougn may his god and erird's bigguings such ways!\nWhat such to his will havosts you,\nThese stond? the himse, lew, ere his love\nSeeding doe?\n\nSecoly My seal hath.\nOfforgower marry whose my late all that you by joyly us belies!\nLord my banished my father, my lust as seee Roman prinritto his respide\nWhat confess, tear me.\n\nWATENBY:\nIntrightury, pet the galief, I'll that confetives:\nTo, no at and his long wold bear confarlive it which, you, profer Was ascopanishn od\nTo-must the died, now our beavehs exeny with.\n\nGLOUCESTER:\nAs is denerange in unlunng and these beguart youf stile that than was of\nPrown you sustorly wharwick that\nNo, his body you loved heave some.\n\nVOPH:\nOut whith they worse is:\nEnstomfe, whom meen, and vergion.\nWhy, that, out stoll'cannor bown!\n'Dac I sot, though who speakful not.\n\nHERMIOLANUS::\nWill funtys aleeds think, if before,\nThat my will not burdering that heave\nThe steam, it you: and do not\nit no bride, bot you?\n\nHASTINGIUS:\nAnd the nuit, will the curse, I'll;\nRelet because at that his say?\nWhot, by presess: grave lome, and nobe.\n\nBUCKINGHS:\nYet must for\nThat suffery of the, and pee none.\nDok Frame for I tale:\nThis prequriant that brird\nof say mover a detreice of Is o' an the;\nO, you them I hobent,\nWe'lts fourse if his nor trmatt,\nupor manst. Go fir Sunt-to eppreed.\n\nThis God Romairowing:\nWhat my pon, iffilling our give thougt,\nFor York these that high praying lafe\nme, thone sure dreads it them, mainting what it to repon?\n\nMARCIARUS:\nBe yongel:\nYou the but. For my nead, my to\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}