{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":4226660,"sourceType":"datasetVersion","datasetId":2491115}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import torch\nimport torch.nn.functional as F\nimport matplotlib.pyplot as plt\n\n%matplotlib inline","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:13:50.200858Z","iopub.execute_input":"2024-07-12T18:13:50.201273Z","iopub.status.idle":"2024-07-12T18:13:54.099432Z","shell.execute_reply.started":"2024-07-12T18:13:50.201238Z","shell.execute_reply":"2024-07-12T18:13:54.098278Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"import random \nrandom.seed(42)","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:13:54.101395Z","iopub.execute_input":"2024-07-12T18:13:54.101959Z","iopub.status.idle":"2024-07-12T18:13:54.109148Z","shell.execute_reply.started":"2024-07-12T18:13:54.101914Z","shell.execute_reply":"2024-07-12T18:13:54.107100Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\n\ndf = pd.read_csv('/kaggle/input/us-baby-names-by-year-of-birth/babyNamesUSYOB-mostpopular.csv')\nnames = df.Name.values","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:13:54.116369Z","iopub.execute_input":"2024-07-12T18:13:54.116815Z","iopub.status.idle":"2024-07-12T18:13:55.265492Z","shell.execute_reply.started":"2024-07-12T18:13:54.116776Z","shell.execute_reply":"2024-07-12T18:13:55.263967Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":"**Building a vocabulary of the characters and mapping for to/from ints**","metadata":{}},{"cell_type":"code","source":"chars = sorted(list(set(''.join(names))))\nstoi = {s:i+1 for i,s in enumerate(chars)}\nstoi['.'] = 0\nitos = {i:s for s,i in stoi.items()}\nitos","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:13:55.274852Z","iopub.execute_input":"2024-07-12T18:13:55.280503Z","iopub.status.idle":"2024-07-12T18:13:55.337076Z","shell.execute_reply.started":"2024-07-12T18:13:55.280434Z","shell.execute_reply":"2024-07-12T18:13:55.335713Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"{1: 'A',\n 2: 'B',\n 3: 'C',\n 4: 'D',\n 5: 'E',\n 6: 'F',\n 7: 'G',\n 8: 'H',\n 9: 'I',\n 10: 'J',\n 11: 'K',\n 12: 'L',\n 13: 'M',\n 14: 'N',\n 15: 'O',\n 16: 'P',\n 17: 'Q',\n 18: 'R',\n 19: 'S',\n 20: 'T',\n 21: 'U',\n 22: 'V',\n 23: 'W',\n 24: 'X',\n 25: 'Y',\n 26: 'Z',\n 27: 'a',\n 28: 'b',\n 29: 'c',\n 30: 'd',\n 31: 'e',\n 32: 'f',\n 33: 'g',\n 34: 'h',\n 35: 'i',\n 36: 'j',\n 37: 'k',\n 38: 'l',\n 39: 'm',\n 40: 'n',\n 41: 'o',\n 42: 'p',\n 43: 'q',\n 44: 'r',\n 45: 's',\n 46: 't',\n 47: 'u',\n 48: 'v',\n 49: 'w',\n 50: 'x',\n 51: 'y',\n 52: 'z',\n 0: '.'}"},"metadata":{}}]},{"cell_type":"markdown","source":"Bulld the dateset","metadata":{}},{"cell_type":"code","source":"block_size = 3 # context length: how many characters taken to predict the next character\nX,Y = [], []\n\nfor n in names[:5]:\n    \n    context = [0] * block_size\n    for ch in n + '.':\n        ix = stoi[ch]\n        X.append(context)\n        Y.append(ix)\n        print(''.join(itos[i] for i in context), '--->', itos[ix])\n        context = context[1:] + [ix] # crop and append\n        \nX = torch.tensor(X)\nY = torch.tensor(Y)","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:13:55.338742Z","iopub.execute_input":"2024-07-12T18:13:55.339206Z","iopub.status.idle":"2024-07-12T18:13:55.365112Z","shell.execute_reply.started":"2024-07-12T18:13:55.339162Z","shell.execute_reply":"2024-07-12T18:13:55.363616Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"... ---> M\n..M ---> a\n.Ma ---> r\nMar ---> y\nary ---> .\n... ---> A\n..A ---> n\n.An ---> n\nAnn ---> a\nnna ---> .\n... ---> E\n..E ---> m\n.Em ---> m\nEmm ---> a\nmma ---> .\n... ---> E\n..E ---> l\n.El ---> i\nEli ---> z\nliz ---> a\niza ---> b\nzab ---> e\nabe ---> t\nbet ---> h\neth ---> .\n... ---> M\n..M ---> i\n.Mi ---> n\nMin ---> n\ninn ---> i\nnni ---> e\nnie ---> .\n","output_type":"stream"}]},{"cell_type":"code","source":"X.shape, X.dtype, Y.shape, Y.dtype","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:13:55.366846Z","iopub.execute_input":"2024-07-12T18:13:55.367300Z","iopub.status.idle":"2024-07-12T18:13:55.375949Z","shell.execute_reply.started":"2024-07-12T18:13:55.367262Z","shell.execute_reply":"2024-07-12T18:13:55.374624Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"(torch.Size([32, 3]), torch.int64, torch.Size([32]), torch.int64)"},"metadata":{}}]},{"cell_type":"code","source":"def build_dataset(words):\n    X, Y = [], []\n    for n in words:\n    \n        context = [0] * block_size\n        for ch in n + '.':\n            ix = stoi[ch]\n            X.append(context)\n            Y.append(ix)\n        \n            context = context[1:] + [ix] # crop and append\n        \n    X = torch.tensor(X)\n    Y = torch.tensor(Y)\n    print(X.shape, Y.shape)\n    return X,Y","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:13:55.377517Z","iopub.execute_input":"2024-07-12T18:13:55.377868Z","iopub.status.idle":"2024-07-12T18:13:55.386661Z","shell.execute_reply.started":"2024-07-12T18:13:55.377835Z","shell.execute_reply":"2024-07-12T18:13:55.385553Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"random.shuffle(names)\nn1 = int(0.8*len(names))\nn2 = int(0.9*len(names))\n\n# Train, Dev, and Test split \n\nXtr, Ytr = build_dataset(names[:n1]) #80%\nXdev, Ydev = build_dataset(names[n1:n2]) #10%\nXte, Yte = build_dataset(names[n2:]) # 10%","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:13:55.388170Z","iopub.execute_input":"2024-07-12T18:13:55.388513Z","iopub.status.idle":"2024-07-12T18:14:01.625376Z","shell.execute_reply.started":"2024-07-12T18:13:55.388478Z","shell.execute_reply":"2024-07-12T18:14:01.624195Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"torch.Size([1233618, 3]) torch.Size([1233618])\ntorch.Size([154343, 3]) torch.Size([154343])\ntorch.Size([154741, 3]) torch.Size([154741])\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Vocabulary of 53 characters is embeded into 2 dimensional embedding","metadata":{}},{"cell_type":"code","source":"C = torch.randn((53,2))","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:14:01.631470Z","iopub.execute_input":"2024-07-12T18:14:01.631836Z","iopub.status.idle":"2024-07-12T18:14:01.647299Z","shell.execute_reply.started":"2024-07-12T18:14:01.631808Z","shell.execute_reply":"2024-07-12T18:14:01.646167Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"markdown","source":"Index look-up is similar to matrix multiplication with one-hot encoding\n```python\nF.one_hot(torch.tensor(5), num_classes = 53).float() @ C == C[5]\n```\n_`int` tensor must be cast to `float` is mat-mul with a float tensor_\n\nThe one-hot encoding since it's filled with 0 will mask out everything else resulting in equivalent result. \n\nEmbedding can be interpreted as a indexing into a look-up table `C` or as the first layer of the neural network. Linear layer with weights matrix `C`. \n","metadata":{}},{"cell_type":"code","source":"C[5]","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:14:01.648925Z","iopub.execute_input":"2024-07-12T18:14:01.649481Z","iopub.status.idle":"2024-07-12T18:14:01.734238Z","shell.execute_reply.started":"2024-07-12T18:14:01.649441Z","shell.execute_reply":"2024-07-12T18:14:01.733095Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"tensor([ 0.0161, -1.1651])"},"metadata":{}}]},{"cell_type":"code","source":"F.one_hot(torch.tensor(5), num_classes = 53).float() @ C","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:14:01.735810Z","iopub.execute_input":"2024-07-12T18:14:01.736164Z","iopub.status.idle":"2024-07-12T18:14:01.770842Z","shell.execute_reply.started":"2024-07-12T18:14:01.736134Z","shell.execute_reply":"2024-07-12T18:14:01.769720Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"tensor([ 0.0161, -1.1651])"},"metadata":{}}]},{"cell_type":"code","source":"X[13,2]","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:14:01.772273Z","iopub.execute_input":"2024-07-12T18:14:01.772621Z","iopub.status.idle":"2024-07-12T18:14:01.780072Z","shell.execute_reply.started":"2024-07-12T18:14:01.772593Z","shell.execute_reply":"2024-07-12T18:14:01.778957Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"tensor(39)"},"metadata":{}}]},{"cell_type":"code","source":"C[X][13,2]","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:14:01.781560Z","iopub.execute_input":"2024-07-12T18:14:01.782222Z","iopub.status.idle":"2024-07-12T18:14:01.794945Z","shell.execute_reply.started":"2024-07-12T18:14:01.782183Z","shell.execute_reply":"2024-07-12T18:14:01.793727Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"tensor([-0.1629, -0.6057])"},"metadata":{}}]},{"cell_type":"code","source":"C[39]","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:14:01.796441Z","iopub.execute_input":"2024-07-12T18:14:01.796838Z","iopub.status.idle":"2024-07-12T18:14:01.806737Z","shell.execute_reply.started":"2024-07-12T18:14:01.796808Z","shell.execute_reply":"2024-07-12T18:14:01.805631Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"tensor([-0.1629, -0.6057])"},"metadata":{}}]},{"cell_type":"code","source":"emb = C[X]\nemb.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:14:01.808217Z","iopub.execute_input":"2024-07-12T18:14:01.808978Z","iopub.status.idle":"2024-07-12T18:14:01.818894Z","shell.execute_reply.started":"2024-07-12T18:14:01.808942Z","shell.execute_reply":"2024-07-12T18:14:01.817839Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"torch.Size([32, 3, 2])"},"metadata":{}}]},{"cell_type":"markdown","source":"Inputs to the first layers is 3 * 2 because 3 dimensional context window and 2 dimensional embedding space\n```python\nemb.shape = torch.Size([1542702, 3, 2])\n```","metadata":{}},{"cell_type":"code","source":"W1 = torch.randn((6,100))\nb1 = torch.randn(100)","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:14:01.820304Z","iopub.execute_input":"2024-07-12T18:14:01.820742Z","iopub.status.idle":"2024-07-12T18:14:01.830651Z","shell.execute_reply.started":"2024-07-12T18:14:01.820706Z","shell.execute_reply":"2024-07-12T18:14:01.829528Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"markdown","source":"Cannot directly multiply because of different dimensions\n```python\nemb @ W1 + b1\n\ntorch.view(-1) # infers the shape of the tensor\n```\nWill use `torch.view()` to reshape the tensor; efficient function since in memory the tensor is stored as a 1-dim vector and is computed to a different shape, storage offset, stride and shapes changed so 1-dim array can be seen as different n-dim arrays.\nblog post about [pytorch internals](http://blog.ezyang.com/2019/05/pytorch-internals/)\n\nBroadcasting to match dimensions when adding tensors\n- (32, 100) \n- (1,     100)","metadata":{}},{"cell_type":"code","source":"h = torch.tanh(emb.view(-1,6) @ W1 + b1)","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:14:01.832090Z","iopub.execute_input":"2024-07-12T18:14:01.832537Z","iopub.status.idle":"2024-07-12T18:14:01.858502Z","shell.execute_reply.started":"2024-07-12T18:14:01.832427Z","shell.execute_reply":"2024-07-12T18:14:01.857446Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"h.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:14:01.859829Z","iopub.execute_input":"2024-07-12T18:14:01.860180Z","iopub.status.idle":"2024-07-12T18:14:01.867875Z","shell.execute_reply.started":"2024-07-12T18:14:01.860153Z","shell.execute_reply":"2024-07-12T18:14:01.866749Z"},"trusted":true},"execution_count":18,"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"torch.Size([32, 100])"},"metadata":{}}]},{"cell_type":"code","source":"h","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:14:01.869398Z","iopub.execute_input":"2024-07-12T18:14:01.869822Z","iopub.status.idle":"2024-07-12T18:14:01.890182Z","shell.execute_reply.started":"2024-07-12T18:14:01.869779Z","shell.execute_reply":"2024-07-12T18:14:01.889157Z"},"trusted":true},"execution_count":19,"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"tensor([[-0.9999, -0.9668,  0.9616,  ..., -0.9980, -0.9996,  0.9757],\n        [-0.9996, -0.9970, -0.4348,  ..., -0.9964, -0.9989, -0.8962],\n        [-1.0000, -0.9980,  0.8103,  ...,  0.0801, -0.6194,  0.9813],\n        ...,\n        [-0.7317, -0.9508, -0.9826,  ...,  0.9975,  0.9958, -0.9786],\n        [-0.8249, -0.9820, -0.9308,  ...,  0.9937,  0.9885, -0.9949],\n        [-0.9414, -0.7018,  0.9066,  ...,  0.9905,  0.9898,  0.9354]])"},"metadata":{}}]},{"cell_type":"markdown","source":"Final layer of the network\nInput is `100` from the previous layer and output is `53` becuase 53 character dictionary","metadata":{}},{"cell_type":"code","source":"W2 = torch.randn((100,53))\nb1 = torch.randn(53)","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:14:01.891749Z","iopub.execute_input":"2024-07-12T18:14:01.892126Z","iopub.status.idle":"2024-07-12T18:14:01.899794Z","shell.execute_reply.started":"2024-07-12T18:14:01.892086Z","shell.execute_reply":"2024-07-12T18:14:01.898550Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"logits = h @ W2 + b1","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:14:01.901281Z","iopub.execute_input":"2024-07-12T18:14:01.901714Z","iopub.status.idle":"2024-07-12T18:14:01.913806Z","shell.execute_reply.started":"2024-07-12T18:14:01.901656Z","shell.execute_reply":"2024-07-12T18:14:01.912600Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"logits.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:14:01.915371Z","iopub.execute_input":"2024-07-12T18:14:01.915749Z","iopub.status.idle":"2024-07-12T18:14:01.927913Z","shell.execute_reply.started":"2024-07-12T18:14:01.915720Z","shell.execute_reply":"2024-07-12T18:14:01.926638Z"},"trusted":true},"execution_count":22,"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"torch.Size([32, 53])"},"metadata":{}}]},{"cell_type":"code","source":"counts = logits.exp()","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:14:01.929120Z","iopub.execute_input":"2024-07-12T18:14:01.929434Z","iopub.status.idle":"2024-07-12T18:14:01.947883Z","shell.execute_reply.started":"2024-07-12T18:14:01.929407Z","shell.execute_reply":"2024-07-12T18:14:01.946726Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"prob = counts / counts.sum(1, keepdims = True)","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:14:01.949180Z","iopub.execute_input":"2024-07-12T18:14:01.949530Z","iopub.status.idle":"2024-07-12T18:14:01.955743Z","shell.execute_reply.started":"2024-07-12T18:14:01.949501Z","shell.execute_reply":"2024-07-12T18:14:01.954566Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"prob.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:14:01.957547Z","iopub.execute_input":"2024-07-12T18:14:01.957921Z","iopub.status.idle":"2024-07-12T18:14:01.969065Z","shell.execute_reply.started":"2024-07-12T18:14:01.957890Z","shell.execute_reply":"2024-07-12T18:14:01.967751Z"},"trusted":true},"execution_count":25,"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"torch.Size([32, 53])"},"metadata":{}}]},{"cell_type":"markdown","source":"Every row in prob should sum to `1`","metadata":{}},{"cell_type":"code","source":"prob[0].sum()","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:14:01.970495Z","iopub.execute_input":"2024-07-12T18:14:01.970868Z","iopub.status.idle":"2024-07-12T18:14:01.983312Z","shell.execute_reply.started":"2024-07-12T18:14:01.970840Z","shell.execute_reply":"2024-07-12T18:14:01.982166Z"},"trusted":true},"execution_count":26,"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"tensor(1.)"},"metadata":{}}]},{"cell_type":"code","source":"prob[torch.arange(32),Y]","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:14:01.990980Z","iopub.execute_input":"2024-07-12T18:14:01.991607Z","iopub.status.idle":"2024-07-12T18:14:02.002530Z","shell.execute_reply.started":"2024-07-12T18:14:01.991575Z","shell.execute_reply":"2024-07-12T18:14:02.001349Z"},"trusted":true},"execution_count":27,"outputs":[{"execution_count":27,"output_type":"execute_result","data":{"text/plain":"tensor([7.0318e-11, 1.8761e-14, 8.0581e-12, 5.7798e-13, 1.0545e-08, 4.0923e-10,\n        2.6307e-02, 5.1930e-12, 4.3085e-11, 2.1960e-07, 9.9865e-01, 1.7579e-04,\n        2.9542e-04, 5.8181e-12, 3.9424e-08, 9.9865e-01, 1.6681e-08, 5.9875e-18,\n        2.6704e-04, 1.0773e-09, 1.4212e-13, 2.1311e-06, 7.6237e-12, 1.0726e-13,\n        1.6843e-10, 7.0318e-11, 2.1502e-15, 1.9816e-08, 4.0209e-07, 2.4203e-11,\n        3.5644e-07, 2.5997e-07])"},"metadata":{}}]},{"cell_type":"code","source":"loss = -prob[torch.arange(32), Y].log().mean()\nloss","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:14:02.003951Z","iopub.execute_input":"2024-07-12T18:14:02.004337Z","iopub.status.idle":"2024-07-12T18:14:02.015249Z","shell.execute_reply.started":"2024-07-12T18:14:02.004298Z","shell.execute_reply":"2024-07-12T18:14:02.014255Z"},"trusted":true},"execution_count":28,"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"tensor(19.6353)"},"metadata":{}}]},{"cell_type":"markdown","source":"Negative log-likelihood loss better to use because Pytorch will cluster all of the operations and is more \nmemory efficient since will not be creating new tensors like `counts`, `probs` and its also a much simpler backward pass to implement\n```python\nF.cross_entropy(logits, Y)   # efficient forward and backward pass\n```\nAlso to prevent running outside the Floating Point Operation rane Pytorcg will subtract the maximum value from the tensor for handling extreme values\nsee example below","metadata":{}},{"cell_type":"code","source":"demo_logits = torch.tensor([-30,-5,0,5,100])\ndemo_counts = demo_logits.exp()\ndemo_probs = demo_counts / demo_counts.sum()\ndemo_probs","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:14:02.016800Z","iopub.execute_input":"2024-07-12T18:14:02.017375Z","iopub.status.idle":"2024-07-12T18:14:02.034743Z","shell.execute_reply.started":"2024-07-12T18:14:02.017345Z","shell.execute_reply":"2024-07-12T18:14:02.033524Z"},"trusted":true},"execution_count":29,"outputs":[{"execution_count":29,"output_type":"execute_result","data":{"text/plain":"tensor([0., 0., 0., 0., nan])"},"metadata":{}}]},{"cell_type":"code","source":"demo_counts","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:14:02.036167Z","iopub.execute_input":"2024-07-12T18:14:02.036518Z","iopub.status.idle":"2024-07-12T18:14:02.044229Z","shell.execute_reply.started":"2024-07-12T18:14:02.036485Z","shell.execute_reply":"2024-07-12T18:14:02.043191Z"},"trusted":true},"execution_count":30,"outputs":[{"execution_count":30,"output_type":"execute_result","data":{"text/plain":"tensor([9.3576e-14, 6.7379e-03, 1.0000e+00, 1.4841e+02,        inf])"},"metadata":{}}]},{"cell_type":"code","source":"demo_logits = torch.tensor([-100,-5,0,5,100]) - 100\ndemo_counts = demo_logits.exp()\ndemo_probs = demo_counts / demo_counts.sum()\ndemo_probs","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:14:02.045824Z","iopub.execute_input":"2024-07-12T18:14:02.046596Z","iopub.status.idle":"2024-07-12T18:14:02.058766Z","shell.execute_reply.started":"2024-07-12T18:14:02.046557Z","shell.execute_reply":"2024-07-12T18:14:02.057525Z"},"trusted":true},"execution_count":31,"outputs":[{"execution_count":31,"output_type":"execute_result","data":{"text/plain":"tensor([0.0000e+00, 0.0000e+00, 3.7835e-44, 5.5211e-42, 1.0000e+00])"},"metadata":{}}]},{"cell_type":"markdown","source":"Everything together ","metadata":{}},{"cell_type":"code","source":"Xtr.shape, Ytr.shape # Training Data ","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:16:08.594099Z","iopub.execute_input":"2024-07-12T18:16:08.594561Z","iopub.status.idle":"2024-07-12T18:16:08.602185Z","shell.execute_reply.started":"2024-07-12T18:16:08.594519Z","shell.execute_reply":"2024-07-12T18:16:08.601093Z"},"trusted":true},"execution_count":42,"outputs":[{"execution_count":42,"output_type":"execute_result","data":{"text/plain":"(torch.Size([1233618, 3]), torch.Size([1233618]))"},"metadata":{}}]},{"cell_type":"code","source":"g = torch.Generator().manual_seed(42) # For reproducibility \nC = torch.randn((53, 10), generator=g)\nW1 = torch.randn((30, 300), generator = g)\nb1 = torch.randn(300, generator = g)\nW2 = torch.randn((300, 53), generator=g)\nb2 = torch.randn(53, generator=g)\nparameters = [C, W1, b1, W2, b2]","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:37:57.852541Z","iopub.execute_input":"2024-07-12T18:37:57.853298Z","iopub.status.idle":"2024-07-12T18:37:57.860467Z","shell.execute_reply.started":"2024-07-12T18:37:57.853266Z","shell.execute_reply":"2024-07-12T18:37:57.859489Z"},"trusted":true},"execution_count":94,"outputs":[]},{"cell_type":"code","source":"sum(p.nelement() for p in parameters ) # total number of parameters in the network","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:37:58.400385Z","iopub.execute_input":"2024-07-12T18:37:58.400788Z","iopub.status.idle":"2024-07-12T18:37:58.407551Z","shell.execute_reply.started":"2024-07-12T18:37:58.400758Z","shell.execute_reply":"2024-07-12T18:37:58.406538Z"},"trusted":true},"execution_count":95,"outputs":[{"execution_count":95,"output_type":"execute_result","data":{"text/plain":"25783"},"metadata":{}}]},{"cell_type":"markdown","source":"Must have grad for training ","metadata":{}},{"cell_type":"code","source":"for p in parameters:\n    p.requires_grad = True","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:37:59.517552Z","iopub.execute_input":"2024-07-12T18:37:59.518372Z","iopub.status.idle":"2024-07-12T18:37:59.522596Z","shell.execute_reply.started":"2024-07-12T18:37:59.518340Z","shell.execute_reply":"2024-07-12T18:37:59.521595Z"},"trusted":true},"execution_count":96,"outputs":[]},{"cell_type":"code","source":"lre = torch.linspace(-3,0,1000)\nlrs = 10**lre","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:38:01.870173Z","iopub.execute_input":"2024-07-12T18:38:01.870674Z","iopub.status.idle":"2024-07-12T18:38:01.875974Z","shell.execute_reply.started":"2024-07-12T18:38:01.870635Z","shell.execute_reply":"2024-07-12T18:38:01.874934Z"},"trusted":true},"execution_count":97,"outputs":[]},{"cell_type":"code","source":"lri = []\nlossi = []\nstepi = []","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:38:03.242664Z","iopub.execute_input":"2024-07-12T18:38:03.243643Z","iopub.status.idle":"2024-07-12T18:38:03.257441Z","shell.execute_reply.started":"2024-07-12T18:38:03.243610Z","shell.execute_reply":"2024-07-12T18:38:03.254538Z"},"trusted":true},"execution_count":98,"outputs":[]},{"cell_type":"code","source":"for i in range(50_000):\n    \n    # minibatch construct\n    ix = torch.randint(0, Xtr.shape[0], (32,))\n    \n    # Forward Pass\n    emb = C[Xtr[ix]] # (32, 3, 10)\n    h = torch.tanh(emb.view(-1, 30) @ W1 + b1) # (32, 200)\n    logits = h @ W2 + b2 # (32, 53)\n    loss = F.cross_entropy(logits, Ytr[ix])\n    # print(loss.item())\n    \n    # Backward pass\n    for p in parameters:\n        p.grad = None\n    loss.backward()\n    \n    # update\n    lr = 0.01 # set to 0.1 after looking for the optimal learning rate then decreased to 0.05 and eventually to 0.01\n    \n    for p in parameters:\n        p.data += -lr * p.grad\n    \n    # track stats \n    # lri.append(lre[i])     no longer need to track the learning rate\n    stepi.append(i)\n    lossi.append(loss.log10().item())\n    ","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:52:59.223244Z","iopub.execute_input":"2024-07-12T18:52:59.224175Z","iopub.status.idle":"2024-07-12T18:53:36.771183Z","shell.execute_reply.started":"2024-07-12T18:52:59.224140Z","shell.execute_reply":"2024-07-12T18:53:36.770131Z"},"trusted":true},"execution_count":114,"outputs":[]},{"cell_type":"code","source":"plt.plot(stepi, lossi)","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:53:36.773270Z","iopub.execute_input":"2024-07-12T18:53:36.773766Z","iopub.status.idle":"2024-07-12T18:53:37.290210Z","shell.execute_reply.started":"2024-07-12T18:53:36.773731Z","shell.execute_reply":"2024-07-12T18:53:37.289289Z"},"trusted":true},"execution_count":115,"outputs":[{"execution_count":115,"output_type":"execute_result","data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7decf8fe5480>]"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"#### Finding the best learning rate\n\nBased on the chart the best learning rate is around `0.1` and will slowly be decreased as training progresses. ","metadata":{}},{"cell_type":"code","source":"plt.plot(lri, lossi)","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:31:00.695647Z","iopub.execute_input":"2024-07-12T18:31:00.696051Z","iopub.status.idle":"2024-07-12T18:31:00.969956Z","shell.execute_reply.started":"2024-07-12T18:31:00.696020Z","shell.execute_reply":"2024-07-12T18:31:00.968820Z"},"trusted":true},"execution_count":71,"outputs":[{"execution_count":71,"output_type":"execute_result","data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7dec9a9e0df0>]"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"Loss over the dataset","metadata":{}},{"cell_type":"markdown","source":"#### Training set loss\n- Train neural network to the data\n- If training set loss is less than the validation set loss likely starting to overfit\n\nTraining loss -> 24 -> 1.8587 -> 1.6919","metadata":{}},{"cell_type":"code","source":"emb = C[Xtr] # (32, 3, 2)\nh = torch.tanh(emb.view(-1, 30) @ W1 + b1) # (32, 200)\nlogits = h @ W2 + b2\nloss = F.cross_entropy(logits, Ytr)\nloss","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:54:10.859990Z","iopub.execute_input":"2024-07-12T18:54:10.860870Z","iopub.status.idle":"2024-07-12T18:54:14.720858Z","shell.execute_reply.started":"2024-07-12T18:54:10.860839Z","shell.execute_reply":"2024-07-12T18:54:14.719718Z"},"trusted":true},"execution_count":116,"outputs":[{"execution_count":116,"output_type":"execute_result","data":{"text/plain":"tensor(1.6919, grad_fn=<NllLossBackward0>)"},"metadata":{}}]},{"cell_type":"markdown","source":"#### Dev/Validation set loss\n- Test hyperparamters for the neural network\n\nLoss: 24 -> 1.8596 -> 1.6987","metadata":{}},{"cell_type":"code","source":"emb = C[Xdev] # (32, 3, 2)\nh = torch.tanh(emb.view(-1, 30) @ W1 + b1) # (32, 200)\nlogits = h @ W2 + b2\nloss = F.cross_entropy(logits, Ydev)\nloss","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:54:40.259302Z","iopub.execute_input":"2024-07-12T18:54:40.260584Z","iopub.status.idle":"2024-07-12T18:54:40.711273Z","shell.execute_reply.started":"2024-07-12T18:54:40.260547Z","shell.execute_reply":"2024-07-12T18:54:40.709981Z"},"trusted":true},"execution_count":117,"outputs":[{"execution_count":117,"output_type":"execute_result","data":{"text/plain":"tensor(1.6987, grad_fn=<NllLossBackward0>)"},"metadata":{}}]},{"cell_type":"markdown","source":"#### Test set loss\n- Test model accuracy should be one time once the model is done training","metadata":{}},{"cell_type":"code","source":"emb = C[Xte] # (32, 3, 2)\nh = torch.tanh(emb.view(-1, 30) @ W1 + b1) # (32, 200)\nlogits = h @ W2 + b2\nloss = F.cross_entropy(logits, Yte)\nloss","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:54:57.785331Z","iopub.execute_input":"2024-07-12T18:54:57.785695Z","iopub.status.idle":"2024-07-12T18:54:58.206879Z","shell.execute_reply.started":"2024-07-12T18:54:57.785652Z","shell.execute_reply":"2024-07-12T18:54:58.206070Z"},"trusted":true},"execution_count":118,"outputs":[{"execution_count":118,"output_type":"execute_result","data":{"text/plain":"tensor(1.6967, grad_fn=<NllLossBackward0>)"},"metadata":{}}]},{"cell_type":"markdown","source":"### Visualizing the dimensions 0 and 1 of the embedding matrix `C` for all characters\n","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize=(8,8))\nplt.scatter(C[:,0].data, C[:,1].data, s=200)\nfor i in range(C.shape[0]):\n    plt.text(C[i,0].item(), C[i,1].item(), itos[i], ha='center', va='center', color='white' )\nplt.grid('minor')","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:40:20.869415Z","iopub.execute_input":"2024-07-12T18:40:20.870201Z","iopub.status.idle":"2024-07-12T18:40:21.202714Z","shell.execute_reply.started":"2024-07-12T18:40:20.870168Z","shell.execute_reply":"2024-07-12T18:40:21.201627Z"},"trusted":true},"execution_count":106,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x800 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"### Generating samples from the trained model","metadata":{}},{"cell_type":"code","source":"g = torch.Generator().manual_seed(42)\n\nfor _ in range(20):\n    \n    out = []\n    context = [0] * block_size # initializing the model with \"...\"\n    while True:\n        emb = C[torch.tensor([context])]  # (1, block_size, d)\n        h = torch.tanh(emb.view(1, -1) @ W1 + b1 )\n        logits = h @ W2 + b2\n        probs = F.softmax(logits, dim=1)\n        ix = torch.multinomial(probs, num_samples = 1, generator=g).item()\n        context = context[1:] + [ix]\n        out.append(ix)\n        if ix == 0:\n            break\n    print(''.join(itos[i] for i in out))","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:52:33.342866Z","iopub.execute_input":"2024-07-12T18:52:33.343296Z","iopub.status.idle":"2024-07-12T18:52:33.394729Z","shell.execute_reply.started":"2024-07-12T18:52:33.343264Z","shell.execute_reply":"2024-07-12T18:52:33.393731Z"},"trusted":true},"execution_count":112,"outputs":[{"name":"stdout","text":"Yakvirainette.\nDais.\nTamlon.\nJestanda.\nDewin.\nDary.\nDeanelicia.\nBritta.\nLton.\nKamyle.\nKyalia.\nLazy.\nZaiden.\nValia.\nWille.\nLest.\nAlomayle.\nAlayodelica.\nKristina.\nTanmiquelingelin.\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Close to generating names and words \nKristina; Lazy?","metadata":{}},{"cell_type":"markdown","source":"### Sample generation after second training","metadata":{}},{"cell_type":"code","source":"g = torch.Generator().manual_seed(42)\n\nfor _ in range(20):\n    \n    out = []\n    context = [0] * block_size # initializing the model with \"...\"\n    while True:\n        emb = C[torch.tensor([context])]  # (1, block_size, d)\n        h = torch.tanh(emb.view(1, -1) @ W1 + b1 )\n        logits = h @ W2 + b2\n        probs = F.softmax(logits, dim=1)\n        ix = torch.multinomial(probs, num_samples = 1, generator=g).item()\n        context = context[1:] + [ix]\n        out.append(ix)\n        if ix == 0:\n            break\n    print(''.join(itos[i] for i in out))","metadata":{"execution":{"iopub.status.busy":"2024-07-12T18:55:40.339322Z","iopub.execute_input":"2024-07-12T18:55:40.339746Z","iopub.status.idle":"2024-07-12T18:55:40.378618Z","shell.execute_reply.started":"2024-07-12T18:55:40.339713Z","shell.execute_reply":"2024-07-12T18:55:40.377378Z"},"trusted":true},"execution_count":119,"outputs":[{"name":"stdout","text":"Yamiah.\nLenopey.\nLilcis.\nDorene.\nNaddria.\nClaira.\nBrid.\nAshe.\nEllianna.\nKate.\nThomas.\nTrytesha.\nChriscis.\nSue.\nLis.\nWille.\nLeilalin.\nNyla.\nAliyo.\nNatrichaela.\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Very close to name generation with some real names like Kate, Thomas,Sue, Nyla ","metadata":{}}]}